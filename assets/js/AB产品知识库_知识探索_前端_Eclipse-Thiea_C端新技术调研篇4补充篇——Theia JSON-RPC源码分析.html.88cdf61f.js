"use strict";(self.webpackChunkmy_vuepress_site=self.webpackChunkmy_vuepress_site||[]).push([[4041],{98768:(n,s,a)=>{a.r(s),a.d(s,{comp:()=>o,data:()=>c});var p=a(20641);const t=a.p+"assets/img/1.2e049a40.png",e={},o=(0,a(66262).A)(e,[["render",function(n,s){return(0,p.uX)(),(0,p.CE)("div",null,s[0]||(s[0]=[(0,p.Fv)('<p><a href="https://github.com/eclipse-theia/theia" target="_blank" rel="noopener noreferrer">Theia</a>重度使用了<a href="https://github.com/inversify/InversifyJS" target="_blank" rel="noopener noreferrer">InversifyJS</a>，所以想更清晰的了解theia的原理或者源码阅读之前先做一些了解是有帮助的。下面有两个基础连接：</p><ul><li><a href="https://dev.to/jefftian/inversion-of-control-implementation-based-on-typescript-3fl6" target="_blank" rel="noopener noreferrer">IoC implementation Based on Typescript</a>。</li><li><a href="https://rbuckton.github.io/reflect-metadata/" target="_blank" rel="noopener noreferrer">reflect-metadata</a></li></ul><p>本文尽量减少InversifyJS相关代码，从关键代码出发，尽量保证完整性也降低阅读成本。</p><p>有关theia的JSON-RPC的实现原理，下面先通过几个问题一步一步进行分析。</p><h2 id="_1-什么是json-rpc" tabindex="-1"><a class="header-anchor" href="#_1-什么是json-rpc"><span>1.什么是JSON-RPC</span></a></h2><p>JSON-RPC，是一个无状态且轻量级的远程过程调用（RPC）传送协议，其传递内容透过 JSON 为主。相较于一般的 REST 透过网址（如 GET /user）调用远程服务器，JSON-RPC 直接在内容中定义了欲调用的函数名称（如 {&quot;method&quot;: &quot;getUser&quot;}），这也令开发者不会陷于该使用 PUT 或者 PATCH 的问题之中。 本规范主要定义了一些数据结构及其相关的处理规则。它允许运行在基于 Socket、HTTP 等诸多不同消息传输环境的同一进程中。其使用 JSON（RFC 4627）作为数据格式。</p><blockquote><p>JSON-RPC is a stateless, light-weight remote procedure call (RPC) protocol. Primarily this specification defines several data structures and the rules around their processing. It is transport agnostic in that the concepts can be used within the same process, over sockets, over http, or in many various message passing environments. It uses JSON (RFC 4627) as data format. —— <a href="https://www.jsonrpc.org/specification" target="_blank" rel="noopener noreferrer">JSON-RPC 2.0 Specification</a></p></blockquote><h2 id="_2-theia的json-rpc" tabindex="-1"><a class="header-anchor" href="#_2-theia的json-rpc"><span>2.theia的JSON-RPC</span></a></h2><p>在theia中是基于WebSocket进行消息传输的。通过上面我们JSON-RPC只是一种消息协议，说白了可以理解为是一种消息格式的规范，但WebSocket还是那个WebSocket，如果我们抛开JSON-RPC不谈，需要使用WebSocket进行消息传输就需要后端启动服务并且客户端进行连接，之后就可以互相发送消息了。</p><h3 id="原理图" tabindex="-1"><a class="header-anchor" href="#原理图"><span>原理图</span></a></h3><p><img src="'+t+'" alt="jsonrpc"></p><p>更多细节请看：<a href="https://www.processon.com/diagraming/61a0ab5463768975f85037a8" target="_blank" rel="noopener noreferrer">processon-theia-json-rpc</a></p><h3 id="后端如何建立的ws服务并处理消息" tabindex="-1"><a class="header-anchor" href="#后端如何建立的ws服务并处理消息"><span>后端如何建立的WS服务并处理消息</span></a></h3><h4 id="注册一个服务" tabindex="-1"><a class="header-anchor" href="#注册一个服务"><span>注册一个服务</span></a></h4><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token function">bind</span><span class="token punctuation">(</span>ConnectionHandler<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toDynamicValue</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">{</span> container <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span></span>\n<span class="line">    <span class="token keyword">new</span> <span class="token class-name">JsonRpcConnectionHandler<span class="token operator">&lt;</span>ILoggerClient<span class="token operator">&gt;</span></span><span class="token punctuation">(</span>loggerPath<span class="token punctuation">,</span> client <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token keyword">const</span> dispatching <span class="token operator">=</span> container<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>DispatchingLoggerClient<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">        dispatching<span class="token punctuation">.</span>clients<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>client<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">        client<span class="token punctuation">.</span><span class="token function">onDidCloseConnection</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> dispatching<span class="token punctuation">.</span>clients<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>client<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">        <span class="token keyword">return</span> container<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">get</span><span class="token generic class-name"><span class="token operator">&lt;</span>ILoggerServer<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>ILoggerServer<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span></span>\n<span class="line"><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">inSingletonScope</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着来看<code>JsonRpcConnectionHandler</code>的实现：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">JsonRpcConnectionHandler<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> object<span class="token operator">&gt;</span></span> <span class="token keyword">implements</span> <span class="token class-name">ConnectionHandler</span> <span class="token punctuation">{</span></span>\n<span class="line">    <span class="token function">constructor</span><span class="token punctuation">(</span></span>\n<span class="line">        <span class="token keyword">readonly</span> path<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span></span>\n<span class="line">        <span class="token keyword">readonly</span> <span class="token function-variable function">targetFactory</span><span class="token operator">:</span> <span class="token punctuation">(</span>proxy<span class="token operator">:</span> JsonRpcProxy<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">any</span><span class="token punctuation">,</span></span>\n<span class="line">        <span class="token keyword">readonly</span> factoryConstructor<span class="token operator">:</span> <span class="token keyword">new</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> JsonRpcProxyFactory<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span> <span class="token operator">=</span> JsonRpcProxyFactory</span>\n<span class="line">    <span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span></span>\n<span class="line"></span>\n<span class="line">    <span class="token function">onConnection</span><span class="token punctuation">(</span>connection<span class="token operator">:</span> MessageConnection<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token keyword">const</span> factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token keyword">this</span></span><span class="token punctuation">.</span><span class="token function">factoryConstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">        <span class="token keyword">const</span> proxy <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">createProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">        factory<span class="token punctuation">.</span>target <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">targetFactory</span><span class="token punctuation">(</span>proxy<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">        factory<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span>connection<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中实现的<code>ConnectionHandler</code>接口为：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">ConnectionHandler</span> <span class="token punctuation">{</span></span>\n<span class="line">    <span class="token keyword">readonly</span> path<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>\n<span class="line">    <span class="token function">onConnection</span><span class="token punctuation">(</span>connection<span class="token operator">:</span> MessageConnection<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span></span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>到此还未真正启动WebScoket也无法被客户端链接，关键在于执行的<code>onConnection</code>方法，下面来看如何调用的。</p><p>在启动backend的时候，会先检查所有的<code>contribution</code>并调用他们的<code>onStart</code>方法：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> contribution <span class="token keyword">of</span> <span class="token keyword">this</span><span class="token punctuation">.</span>contributionsProvider<span class="token punctuation">.</span><span class="token function">getContributions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>contribution<span class="token punctuation">.</span>onStart<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token keyword">try</span> <span class="token punctuation">{</span></span>\n<span class="line">            <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">measure</span><span class="token punctuation">(</span>contribution<span class="token punctuation">.</span>constructor<span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">&#39;.onStart&#39;</span><span class="token punctuation">,</span></span>\n<span class="line">                <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> contribution<span class="token punctuation">.</span>onStart<span class="token operator">!</span><span class="token punctuation">(</span>server<span class="token punctuation">)</span></span>\n<span class="line">            <span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">            <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&#39;Could not start contribution&#39;</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">        <span class="token punctuation">}</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中的一个<code>contribution</code>为<code>MessagingContribution</code>，它的<code>onStart</code>方法如下：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token function">onStart</span><span class="token punctuation">(</span>server<span class="token operator">:</span> http<span class="token punctuation">.</span>Server <span class="token operator">|</span> https<span class="token punctuation">.</span>Server<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span></span>\n<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>webSocketServer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ws</span><span class="token punctuation">.</span><span class="token function">Server</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>\n<span class="line">        noServer<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>\n<span class="line">        perMessageDeflate<span class="token operator">:</span> <span class="token punctuation">{</span></span>\n<span class="line">            <span class="token comment">// don&#39;t compress if a message is less than 256kb</span></span>\n<span class="line">            threshold<span class="token operator">:</span> <span class="token number">256</span> <span class="token operator">*</span> <span class="token number">1024</span></span>\n<span class="line">        <span class="token punctuation">}</span></span>\n<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">\t<span class="token comment">/* 在HTTP路由请求升级到到WebSocket调用 */</span></span>\n<span class="line">    server<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;upgrade&#39;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">handleHttpUpgrade</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">    <span class="token comment">// ...</span></span>\n<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>webSocketServer<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;connection&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>socket<span class="token operator">:</span> CheckAliveWS<span class="token punctuation">,</span> request<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>\n<span class="line">        socket<span class="token punctuation">.</span>alive <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>\n<span class="line">        socket<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;pong&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> socket<span class="token punctuation">.</span>alive <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">handleConnection</span><span class="token punctuation">(</span>socket<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">\t<span class="token comment">// ...</span></span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>并且在升级到WebSocket服务后触发了上面绑定<code>.on(&#39;connection&#39;)</code>的回调函数，也就会执行里面的关键方法<code>this.handleConnection(socket, request)</code>：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token doc-comment comment">/**</span>\n<span class="line"> * Route HTTP upgrade requests to the WebSocket server.</span>\n<span class="line"> */</span></span>\n<span class="line"><span class="token keyword">protected</span> <span class="token function">handleHttpUpgrade</span><span class="token punctuation">(</span>request<span class="token operator">:</span> http<span class="token punctuation">.</span>IncomingMessage<span class="token punctuation">,</span> socket<span class="token operator">:</span> net<span class="token punctuation">.</span>Socket<span class="token punctuation">,</span> head<span class="token operator">:</span> Buffer<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span></span>\n<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>wsRequestValidator<span class="token punctuation">.</span><span class="token function">allowWsUpgrade</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>allowed <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>allowed<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">            <span class="token keyword">this</span><span class="token punctuation">.</span>webSocketServer<span class="token operator">!</span><span class="token punctuation">.</span><span class="token function">handleUpgrade</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> socket<span class="token punctuation">,</span> head<span class="token punctuation">,</span> client <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>\n<span class="line">                <span class="token comment">// 这里会触发&quot;this.webSocketServer.on(&#39;connection&#39;&quot;的回调</span></span>\n<span class="line">\t\t\t\t<span class="token keyword">this</span><span class="token punctuation">.</span>webSocketServer<span class="token operator">!</span><span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">&#39;connection&#39;</span><span class="token punctuation">,</span> client<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">                <span class="token keyword">this</span><span class="token punctuation">.</span>messagingListener<span class="token punctuation">.</span><span class="token function">onDidWebSocketUpgrade</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> client<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>\n<span class="line">            <span class="token comment">// ...</span></span>\n<span class="line">        <span class="token punctuation">}</span></span>\n<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span> error <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token comment">// ...</span></span>\n<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在<code>handleConnection</code>方法中会调用在<code>init</code>方法中存入<code>wsHandlers</code>的<code>this.handleChannels(socket)</code>，<code>handleChannels</code>实现如下：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">protected</span> <span class="token function">handleChannels</span><span class="token punctuation">(</span>socket<span class="token operator">:</span> ws<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span></span>\n<span class="line">    <span class="token keyword">const</span> channelHandlers <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getConnectionChannelHandlers</span><span class="token punctuation">(</span>socket<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">    <span class="token keyword">const</span> channels <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map<span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token punctuation">,</span> WebSocketChannel<span class="token operator">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">    socket<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;message&#39;</span><span class="token punctuation">,</span> data <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token keyword">try</span> <span class="token punctuation">{</span></span>\n<span class="line">            <span class="token keyword">const</span> message<span class="token operator">:</span> WebSocketChannel<span class="token punctuation">.</span>Message <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span>message<span class="token punctuation">.</span>kind <span class="token operator">===</span> <span class="token string">&#39;open&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">                <span class="token keyword">const</span> <span class="token punctuation">{</span> id<span class="token punctuation">,</span> path <span class="token punctuation">}</span> <span class="token operator">=</span> message<span class="token punctuation">;</span></span>\n<span class="line">                <span class="token keyword">const</span> channel <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">createChannel</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> socket<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">                <span class="token keyword">if</span> <span class="token punctuation">(</span>channelHandlers<span class="token punctuation">.</span><span class="token function">route</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> channel<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">                    <span class="token comment">// ...</span></span>\n<span class="line">                    channels<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> channel<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">                    <span class="token comment">// ...</span></span>\n<span class="line">                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>\n<span class="line">                    <span class="token comment">// ...</span></span>\n<span class="line">                <span class="token punctuation">}</span></span>\n<span class="line">            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>\n<span class="line">                <span class="token keyword">const</span> <span class="token punctuation">{</span> id <span class="token punctuation">}</span> <span class="token operator">=</span> message<span class="token punctuation">;</span></span>\n<span class="line">                <span class="token keyword">const</span> channel <span class="token operator">=</span> channels<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">                <span class="token keyword">if</span> <span class="token punctuation">(</span>channel<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">                    channel<span class="token punctuation">.</span><span class="token function">handleMessage</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>\n<span class="line">                    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&#39;The ws channel does not exist&#39;</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">                <span class="token punctuation">}</span></span>\n<span class="line">            <span class="token punctuation">}</span></span>\n<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">            <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&#39;Failed to handle message&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> error<span class="token punctuation">,</span> data <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">        <span class="token punctuation">}</span></span>\n<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">\t<span class="token comment">// ...</span></span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面逐步分析<code>handleChannels</code>中的关键代码。</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">const</span> channelHandlers <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getConnectionChannelHandlers</span><span class="token punctuation">(</span>socket<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这里会获取到上面<code>new JsonRpcConnectionHandler(xx)</code>的实例，并通过<code>path</code>保存起来，代码如下：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">protected</span> <span class="token function">getConnectionChannelHandlers</span><span class="token punctuation">(</span>socket<span class="token operator">:</span> ws<span class="token punctuation">)</span><span class="token operator">:</span> MessagingContribution<span class="token punctuation">.</span>ConnectionHandlers<span class="token operator">&lt;</span>WebSocketChannel<span class="token operator">&gt;</span> <span class="token punctuation">{</span></span>\n<span class="line">\t<span class="token comment">// ...</span></span>\n<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> connectionHandler <span class="token keyword">of</span> connectionHandlers<span class="token punctuation">.</span><span class="token function">getContributions</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">        connectionChannelHandlers<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>connectionHandler<span class="token punctuation">.</span>path<span class="token punctuation">,</span> <span class="token punctuation">(</span>_<span class="token punctuation">,</span> channel<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>\n<span class="line">            <span class="token keyword">const</span> connection <span class="token operator">=</span> <span class="token function">createWebSocketConnection</span><span class="token punctuation">(</span>channel<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ConsoleLogger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">            connectionHandler<span class="token punctuation">.</span><span class="token function">onConnection</span><span class="token punctuation">(</span>connection<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line">    <span class="token keyword">return</span> connectionChannelHandlers<span class="token punctuation">;</span></span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><code>createWebSocketConnection</code>为<code>vscode-ws-jsonrpc</code>提供的。</p></blockquote><p>接着建立了消息处理函数:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line">socket<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;message&#39;</span><span class="token punctuation">,</span> data <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>\n<span class="line">\t<span class="token comment">// ...</span></span>\n<span class="line">\t<span class="token keyword">if</span> <span class="token punctuation">(</span>message<span class="token punctuation">.</span>kind <span class="token operator">===</span> <span class="token string">&#39;open&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token keyword">const</span> <span class="token punctuation">{</span> id<span class="token punctuation">,</span> path <span class="token punctuation">}</span> <span class="token operator">=</span> message<span class="token punctuation">;</span></span>\n<span class="line">        <span class="token keyword">const</span> channel <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">createChannel</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> socket<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">\t\t<span class="token comment">/* 在这里会通过route调用onConnection方法</span>\n<span class="line">\t\t *</span>\n<span class="line">\t\t * onConnection(connection: MessageConnection): void {</span>\n<span class="line">         *     const factory = new this.factoryConstructor();</span>\n<span class="line">         *     const proxy = factory.createProxy();</span>\n<span class="line">         *     factory.target = this.targetFactory(proxy);</span>\n<span class="line">         *     factory.listen(connection);</span>\n<span class="line">         * }</span>\n<span class="line">\t\t */</span></span>\n<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>channelHandlers<span class="token punctuation">.</span><span class="token function">route</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> channel<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">            <span class="token comment">// ...</span></span>\n<span class="line">            channels<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> channel<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">            <span class="token comment">// ...</span></span>\n<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>\n<span class="line">            <span class="token comment">// ...</span></span>\n<span class="line">        <span class="token punctuation">}</span></span>\n<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token keyword">const</span> <span class="token punctuation">{</span> id <span class="token punctuation">}</span> <span class="token operator">=</span> message<span class="token punctuation">;</span></span>\n<span class="line">        <span class="token keyword">const</span> channel <span class="token operator">=</span> channels<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>channel<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">            channel<span class="token punctuation">.</span><span class="token function">handleMessage</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>\n<span class="line">            <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&#39;The ws channel does not exist&#39;</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">        <span class="token punctuation">}</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在收到消息时，先根据消息<code>kind</code>判断是第一次打开还是已经打开，如果是<code>open</code>，则通过<code>path</code>判断是否在<code>channelHandlers</code>中存在，也就是是否注册过，如：<code>new JsonRpcConnectionHandler&lt;ILoggerClient&gt;(&quot;/services/logger&quot;, client =&gt; {</code>，其中<code>path</code>为<code>&quot;/services/logger&quot;</code>，如果注册过则通过唯一的<code>id</code>保存到叫做<code>channels</code>的<code>Map</code>中；如果非<code>open</code>，则从<code>Map</code>中获取对应的<code>channel</code>并调用其<code>handleMessage</code>方法进行消息处理。</p><blockquote><p>其中<code>id</code>为<code>vscode-ws-jsonrpc</code>包生成的数据格式中的一个字段，在<code>open</code>时并非JSON-RPC，而在非<code>open</code>时的<code>message</code>则为JSON-RPC格式的数据，同样由<code>vscode-ws-jsonrpc</code>生成。</p></blockquote><blockquote><p>有关<code>channel</code>的内容会在后文提到。</p></blockquote><h4 id="后端如何处理消息" tabindex="-1"><a class="header-anchor" href="#后端如何处理消息"><span>后端如何处理消息</span></a></h4><p>在看后端如何处理消息前，需要先了解<code>channel</code>是什么，下面我们通过下面的代码切入：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">const</span> channel <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">createChannel</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> socket<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>上面代码创建了一个<code>channel</code>，实现入下：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">protected</span> <span class="token function">createChannel</span><span class="token punctuation">(</span>id<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> socket<span class="token operator">:</span> ws<span class="token punctuation">)</span><span class="token operator">:</span> WebSocketChannel <span class="token punctuation">{</span></span>\n<span class="line">    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">WebSocketChannel</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> content <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>socket<span class="token punctuation">.</span>readyState <span class="token operator">&lt;</span> ws<span class="token punctuation">.</span><span class="token constant">CLOSING</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">            socket<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>content<span class="token punctuation">,</span> err <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>\n<span class="line">                <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">                    <span class="token keyword">throw</span> err<span class="token punctuation">;</span></span>\n<span class="line">                <span class="token punctuation">}</span></span>\n<span class="line">            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">        <span class="token punctuation">}</span></span>\n<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里我们发现这个<code>channel</code>实际上是一个<code>WebSocketChannel</code>，下面我们看<code>WebSocketChannel</code>的代码：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">WebSocketChannel</span> <span class="token keyword">implements</span> <span class="token class-name">IWebSocket</span> <span class="token punctuation">{</span></span>\n<span class="line">\t<span class="token keyword">static</span> wsPath <span class="token operator">=</span> <span class="token string">&#39;/services&#39;</span><span class="token punctuation">;</span></span>\n<span class="line">\t<span class="token comment">// ...</span></span>\n<span class="line">\t<span class="token function">constructor</span><span class="token punctuation">(</span></span>\n<span class="line">        <span class="token keyword">readonly</span> id<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span></span>\n<span class="line">        <span class="token keyword">protected</span> <span class="token keyword">readonly</span> <span class="token function-variable function">doSend</span><span class="token operator">:</span> <span class="token punctuation">(</span>content<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span></span>\n<span class="line">    <span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span></span>\n<span class="line">\t<span class="token comment">// ...</span></span>\n<span class="line">\t<span class="token function">handleMessage</span><span class="token punctuation">(</span>message<span class="token operator">:</span> WebSocketChannel<span class="token punctuation">.</span>Message<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>message<span class="token punctuation">.</span>kind <span class="token operator">===</span> <span class="token string">&#39;ready&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">fireOpen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>message<span class="token punctuation">.</span>kind <span class="token operator">===</span> <span class="token string">&#39;data&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">fireMessage</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>message<span class="token punctuation">.</span>kind <span class="token operator">===</span> <span class="token string">&#39;close&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">fireClose</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span>code<span class="token punctuation">,</span> message<span class="token punctuation">.</span>reason<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">        <span class="token punctuation">}</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line"></span>\n<span class="line">\t<span class="token function">open</span><span class="token punctuation">(</span>path<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">checkNotDisposed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">doSend</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>WebSocketChannel<span class="token punctuation">.</span>OpenMessage<span class="token operator">&gt;</span><span class="token punctuation">{</span></span>\n<span class="line">            kind<span class="token operator">:</span> <span class="token string">&#39;open&#39;</span><span class="token punctuation">,</span></span>\n<span class="line">            id<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>id<span class="token punctuation">,</span></span>\n<span class="line">            path</span>\n<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line"></span>\n<span class="line">\t<span class="token function">ready</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">checkNotDisposed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">doSend</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>WebSocketChannel<span class="token punctuation">.</span>ReadyMessage<span class="token operator">&gt;</span><span class="token punctuation">{</span></span>\n<span class="line">            kind<span class="token operator">:</span> <span class="token string">&#39;ready&#39;</span><span class="token punctuation">,</span></span>\n<span class="line">            id<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>id</span>\n<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line"></span>\n<span class="line">    <span class="token function">send</span><span class="token punctuation">(</span>content<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">checkNotDisposed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">doSend</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>WebSocketChannel<span class="token punctuation">.</span>DataMessage<span class="token operator">&gt;</span><span class="token punctuation">{</span></span>\n<span class="line">            kind<span class="token operator">:</span> <span class="token string">&#39;data&#39;</span><span class="token punctuation">,</span></span>\n<span class="line">            id<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>id<span class="token punctuation">,</span></span>\n<span class="line">            content</span>\n<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line">\t<span class="token comment">// ...</span></span>\n<span class="line">\t<span class="token keyword">protected</span> <span class="token function-variable function">fireOpen</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function-variable function">void</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>\n<span class="line">    <span class="token function">onOpen</span><span class="token punctuation">(</span><span class="token function-variable function">cb</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">checkNotDisposed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>fireOpen <span class="token operator">=</span> cb<span class="token punctuation">;</span></span>\n<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>toDispose<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>Disposable<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">fireOpen</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line"></span>\n<span class="line">    <span class="token keyword">protected</span> <span class="token function-variable function">fireMessage</span><span class="token operator">:</span> <span class="token punctuation">(</span>data<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function-variable function">void</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>\n<span class="line">    <span class="token function">onMessage</span><span class="token punctuation">(</span><span class="token function-variable function">cb</span><span class="token operator">:</span> <span class="token punctuation">(</span>data<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">checkNotDisposed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>fireMessage <span class="token operator">=</span> cb<span class="token punctuation">;</span></span>\n<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>toDispose<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>Disposable<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">fireMessage</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line">\t<span class="token comment">// ...</span></span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着回到上面处理消息的代码，如下：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line">channel<span class="token punctuation">.</span><span class="token function">handleMessage</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>表示在接到消息后传递给了<code>channel</code>的<code>handleMessage</code>方法处理，并且可以通过<code>WebSocketChannel</code>找到处理函数的实现，这里我们看处理JSON-RPC消息的部分，如下：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>message<span class="token punctuation">.</span>kind <span class="token operator">===</span> <span class="token string">&#39;data&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">fireMessage</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但是却没在工程中找到<code>fireMessage</code>方法的定义，其实这个方法可以通过<code>channel</code>的<code>onMessage</code>方法进行赋值，这里在<code>vscode-ws-jsonrpc</code>会有一次赋值，如下：</p><p><strong>vscode-ws-jsonrpc/src/socket/reader.ts</strong></p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">WebSocketMessageReader</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractMessageReader</span> <span class="token punctuation">{</span></span>\n<span class="line">\t<span class="token comment">// ...</span></span>\n<span class="line">\t<span class="token function">constructor</span><span class="token punctuation">(</span><span class="token keyword">protected</span> <span class="token keyword">readonly</span> socket<span class="token operator">:</span> IWebSocket<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>socket<span class="token punctuation">.</span><span class="token function">onMessage</span><span class="token punctuation">(</span>message <span class="token operator">=&gt;</span></span>\n<span class="line">            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">readMessage</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span></span>\n<span class="line">        <span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">\t\t<span class="token comment">// ...</span></span>\n<span class="line">\t<span class="token punctuation">}</span></span>\n<span class="line">\t<span class="token comment">// ...</span></span>\n<span class="line">\t<span class="token keyword">protected</span> <span class="token function">readMessage</span><span class="token punctuation">(</span>message<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">===</span> <span class="token string">&#39;initial&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">            <span class="token keyword">this</span><span class="token punctuation">.</span>events<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> message <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">===</span> <span class="token string">&#39;listening&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">            <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">            <span class="token keyword">this</span><span class="token punctuation">.</span>callback<span class="token operator">!</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">        <span class="token punctuation">}</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line">\t<span class="token comment">// ...</span></span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最终通过<code>vscode-jsonrpc</code>会触发<code>connection.onRequest((prop, ...args) =&gt; this.onRequest(prop, ...args));</code>绑定的回调函数，有关这段代码会在后文看到。</p><h3 id="前端如何连接到后端的ws并处理消息" tabindex="-1"><a class="header-anchor" href="#前端如何连接到后端的ws并处理消息"><span>前端如何连接到后端的WS并处理消息</span></a></h3><p>以日志模块为例，前端与后端建立连接主要代码如下：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token function">bind</span><span class="token punctuation">(</span>ILoggerServer<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toDynamicValue</span><span class="token punctuation">(</span>ctx <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>\n<span class="line">    <span class="token keyword">const</span> loggerWatcher <span class="token operator">=</span> ctx<span class="token punctuation">.</span>container<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>LoggerWatcher<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">    <span class="token keyword">const</span> connection <span class="token operator">=</span> ctx<span class="token punctuation">.</span>container<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>WebSocketConnectionProvider<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">    <span class="token keyword">const</span> target <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">createProxy</span><span class="token generic class-name"><span class="token operator">&lt;</span>ILoggerServer<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>loggerPath<span class="token punctuation">,</span> loggerWatcher<span class="token punctuation">.</span><span class="token function">getLoggerClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">    <span class="token keyword">function</span> <span class="token generic-function"><span class="token function">get</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">K</span> <span class="token keyword">extends</span> <span class="token keyword">keyof</span> ILoggerServer<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>_<span class="token operator">:</span> ILoggerServer<span class="token punctuation">,</span> property<span class="token operator">:</span> <span class="token constant">K</span><span class="token punctuation">)</span><span class="token operator">:</span> ILoggerServer<span class="token punctuation">[</span><span class="token constant">K</span><span class="token punctuation">]</span> <span class="token operator">|</span> ILoggerServer<span class="token punctuation">[</span><span class="token string">&#39;log&#39;</span><span class="token punctuation">]</span> <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token comment">// ...</span></span>\n<span class="line">        <span class="token keyword">return</span> target<span class="token punctuation">[</span>property<span class="token punctuation">]</span><span class="token punctuation">;</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line">    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> <span class="token punctuation">{</span> get <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">inSingletonScope</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着我们先看下面这行代码：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">const</span> connection <span class="token operator">=</span> ctx<span class="token punctuation">.</span>container<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>WebSocketConnectionProvider<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>下面来看<code>WebSocketConnectionProvider</code>的实现，代码如下：</p><p><strong>ws-connection-provider.ts</strong></p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">WebSocketConnectionProvider</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractConnectionProvider<span class="token operator">&lt;</span>WebSocketOptions<span class="token operator">&gt;</span></span> <span class="token punctuation">{</span></span>\n<span class="line">    <span class="token comment">// ...</span></span>\n<span class="line">    <span class="token keyword">static</span> <span class="token generic-function"><span class="token function">createProxy</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> object<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>container<span class="token operator">:</span> interfaces<span class="token punctuation">.</span>Container<span class="token punctuation">,</span> path<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> arg<span class="token operator">?</span><span class="token operator">:</span> object<span class="token punctuation">)</span><span class="token operator">:</span> JsonRpcProxy<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token keyword">return</span> container<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>WebSocketConnectionProvider<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token generic-function"><span class="token function">createProxy</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> arg<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line">    <span class="token comment">// ...</span></span>\n<span class="line">    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">        <span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">createWebSocketUrl</span><span class="token punctuation">(</span>WebSocketChannel<span class="token punctuation">.</span>wsPath<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">        <span class="token keyword">const</span> socket <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">createWebSocket</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">        <span class="token comment">// ...</span></span>\n<span class="line">        socket<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> data <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>\n<span class="line">            <span class="token keyword">this</span><span class="token punctuation">.</span>websocketErrorCounter <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>\n<span class="line">\t\t\t<span class="token comment">// 此处为调用父类AbstractConnectionProvider中的方法</span></span>\n<span class="line">            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">handleIncomingRawMessage</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">;</span></span>\n<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>socket <span class="token operator">=</span> socket<span class="token punctuation">;</span></span>\n<span class="line">        <span class="token comment">// ...</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line"></span>\n<span class="line">    <span class="token keyword">protected</span> <span class="token function">createChannel</span><span class="token punctuation">(</span>id<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> WebSocketChannel <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token keyword">const</span> httpUrl <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">createHttpWebSocketUrl</span><span class="token punctuation">(</span>WebSocketChannel<span class="token punctuation">.</span>wsPath<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">WebSocketChannel</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> content <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>\n<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>useHttpFallback<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">                <span class="token comment">// ...</span></span>\n<span class="line">            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>socket<span class="token punctuation">.</span>readyState <span class="token operator">&lt;</span> WebSocket<span class="token punctuation">.</span><span class="token constant">CLOSING</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">                <span class="token keyword">this</span><span class="token punctuation">.</span>socket<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ⬅</span></span>\n<span class="line">            <span class="token punctuation">}</span></span>\n<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>abstract-connection-provider.ts</strong></p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">export</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbstractConnectionProvider<span class="token operator">&lt;</span>AbstractOptions <span class="token keyword">extends</span> object<span class="token operator">&gt;</span></span> <span class="token punctuation">{</span></span>\n<span class="line">\t<span class="token comment">// ...</span></span>\n<span class="line">\t<span class="token generic-function"><span class="token function">createProxy</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> object<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>path<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> arg<span class="token operator">?</span><span class="token operator">:</span> object<span class="token punctuation">)</span><span class="token operator">:</span> JsonRpcProxy<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token keyword">const</span> factory <span class="token operator">=</span> arg <span class="token keyword">instanceof</span> <span class="token class-name">JsonRpcProxyFactory</span> <span class="token operator">?</span> arg <span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">JsonRpcProxyFactory<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>\n<span class="line">            path<span class="token punctuation">,</span></span>\n<span class="line">            <span class="token function-variable function">onConnection</span><span class="token operator">:</span> c <span class="token operator">=&gt;</span> factory<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span></span>\n<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">        <span class="token keyword">return</span> factory<span class="token punctuation">.</span><span class="token function">createProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line"></span>\n<span class="line">\t<span class="token doc-comment comment">/**</span>\n<span class="line">     * Install a connection handler for the given path.</span>\n<span class="line">     */</span></span>\n<span class="line">    <span class="token function">listen</span><span class="token punctuation">(</span>handler<span class="token operator">:</span> ConnectionHandler<span class="token punctuation">,</span> options<span class="token operator">?</span><span class="token operator">:</span> AbstractOptions<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">openChannel</span><span class="token punctuation">(</span>handler<span class="token punctuation">.</span>path<span class="token punctuation">,</span> channel <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>\n<span class="line">            <span class="token keyword">const</span> connection <span class="token operator">=</span> <span class="token function">createWebSocketConnection</span><span class="token punctuation">(</span>channel<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">createLogger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">            connection<span class="token punctuation">.</span><span class="token function">onDispose</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> channel<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">            handler<span class="token punctuation">.</span><span class="token function">onConnection</span><span class="token punctuation">(</span>connection<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line"></span>\n<span class="line">    <span class="token function">openChannel</span><span class="token punctuation">(</span>path<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token function-variable function">handler</span><span class="token operator">:</span> <span class="token punctuation">(</span>channel<span class="token operator">:</span> WebSocketChannel<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">,</span> options<span class="token operator">?</span><span class="token operator">:</span> AbstractOptions<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token keyword">const</span> id <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>channelIdSeq<span class="token operator">++</span><span class="token punctuation">;</span></span>\n<span class="line">        <span class="token keyword">const</span> channel <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">createChannel</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>channels<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> channel<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">        channel<span class="token punctuation">.</span><span class="token function">onClose</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>\n<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>channels<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>channel<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">                <span class="token keyword">const</span> <span class="token punctuation">{</span> reconnecting <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span> reconnecting<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token operator">...</span>options <span class="token punctuation">}</span><span class="token punctuation">;</span></span>\n<span class="line">                <span class="token keyword">if</span> <span class="token punctuation">(</span>reconnecting<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">                    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">openChannel</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> handler<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">                <span class="token punctuation">}</span></span>\n<span class="line">            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>\n<span class="line">                <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&#39;The ws channel does not exist&#39;</span><span class="token punctuation">,</span> channel<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">            <span class="token punctuation">}</span></span>\n<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">        channel<span class="token punctuation">.</span><span class="token function">onOpen</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">handler</span><span class="token punctuation">(</span>channel<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">        channel<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line"></span>\n<span class="line">    <span class="token keyword">protected</span> <span class="token keyword">abstract</span> <span class="token function">createChannel</span><span class="token punctuation">(</span>id<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> WebSocketChannel<span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line">    <span class="token keyword">protected</span> <span class="token function">handleIncomingRawMessage</span><span class="token punctuation">(</span>data<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token keyword">const</span> message<span class="token operator">:</span> WebSocketChannel<span class="token punctuation">.</span>Message <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">        <span class="token keyword">const</span> channel <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>channels<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>channel<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">            channel<span class="token punctuation">.</span><span class="token function">handleMessage</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>\n<span class="line">            <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&#39;The ws channel does not exist&#39;</span><span class="token punctuation">,</span> message<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">        <span class="token punctuation">}</span></span>\n<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>onIncomingMessageActivityEmitter<span class="token punctuation">.</span><span class="token function">fire</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line">\t<span class="token comment">// ...</span></span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="json-rpc代理" tabindex="-1"><a class="header-anchor" href="#json-rpc代理"><span>JSON-RPC代理</span></a></h3><p>通过JSON-RPC代理可以实现在客户端直接调用服务端方法及服务端直接调用客户端方法。下面通过theia中的一段代码注释即可对用法有个大概认识。</p><p><strong>proxy-factory.ts</strong></p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token doc-comment comment">/**</span>\n<span class="line"> * Factory for JSON-RPC proxy objects.</span>\n<span class="line"> *</span>\n<span class="line"> * A JSON-RPC proxy exposes the programmatic interface of an object through</span>\n<span class="line"> * JSON-RPC.  This allows remote programs to call methods of this objects by</span>\n<span class="line"> * sending JSON-RPC requests.  This takes place over a bi-directional stream,</span>\n<span class="line"> * where both ends can expose an object and both can call methods each other&#39;s</span>\n<span class="line"> * exposed object.</span>\n<span class="line"> *</span>\n<span class="line"> * For example, assuming we have an object of the following type on one end:</span>\n<span class="line"> *</span>\n<span class="line"> *     class Foo <span class="token punctuation">{</span></span>\n<span class="line"> *         bar(baz: number): number <span class="token punctuation">{</span> return baz + 1 <span class="token punctuation">}</span></span>\n<span class="line"> *     <span class="token punctuation">}</span></span>\n<span class="line"> *</span>\n<span class="line"> * which we want to expose through a JSON-RPC interface.  We would do:</span>\n<span class="line"> *</span>\n<span class="line"> *     let target = new Foo()</span>\n<span class="line"> *     let factory = new JsonRpcProxyFactory&lt;Foo&gt;(&#39;/foo&#39;, target)</span>\n<span class="line"> *     factory.onConnection(connection)</span>\n<span class="line"> *</span>\n<span class="line"> * The party at the other end of the `connection`, in order to remotely call</span>\n<span class="line"> * methods on this object would do:</span>\n<span class="line"> *</span>\n<span class="line"> *     let factory = new JsonRpcProxyFactory&lt;Foo&gt;(&#39;/foo&#39;)</span>\n<span class="line"> *     factory.onConnection(connection)</span>\n<span class="line"> *     let proxy = factory.createProxy();</span>\n<span class="line"> *     let result = proxy.bar(42)</span>\n<span class="line"> *     // result is equal to 43</span>\n<span class="line"> *</span>\n<span class="line"> * One the wire, it would look like this:</span>\n<span class="line"> *</span>\n<span class="line"> *     --&gt; <span class="token punctuation">{</span>&quot;jsonrpc&quot;: &quot;2.0&quot;, &quot;id&quot;: 0, &quot;method&quot;: &quot;bar&quot;, &quot;params&quot;: <span class="token punctuation">{</span>&quot;baz&quot;: 42<span class="token punctuation">}</span><span class="token punctuation">}</span></span>\n<span class="line"> *     &lt;-- <span class="token punctuation">{</span>&quot;jsonrpc&quot;: &quot;2.0&quot;, &quot;id&quot;: 0, &quot;result&quot;: 43<span class="token punctuation">}</span></span>\n<span class="line"> *</span>\n<span class="line"> * Note that in the code of the caller, we didn&#39;t pass a target object to</span>\n<span class="line"> * JsonRpcProxyFactory, because we don&#39;t want/need to expose an object.</span>\n<span class="line"> * If we had passed a target object, the other side could&#39;ve called methods on</span>\n<span class="line"> * it.</span>\n<span class="line"> *</span>\n<span class="line"> * <span class="token keyword">@param</span> &lt;T&gt; - The type of the object to expose to JSON-RPC.</span>\n<span class="line"> */</span></span>\n<span class="line"><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">JsonRpcProxyFactory<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> object<span class="token operator">&gt;</span></span> <span class="token keyword">implements</span> <span class="token class-name">ProxyHandler<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token punctuation">{</span></span>\n<span class="line">\t<span class="token comment">// ...</span></span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>那么是具体是如何实现这种效果的呢？下面结合用法一点一点来看<code>JsonRpcProxyFactory</code>到底是做了什么事。回到上面使用的地方，代码如下：</p><p><strong>前端</strong></p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token generic-function"><span class="token function">createProxy</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> object<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>path<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> arg<span class="token operator">?</span><span class="token operator">:</span> object<span class="token punctuation">)</span><span class="token operator">:</span> JsonRpcProxy<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span></span>\n<span class="line">    <span class="token keyword">const</span> factory <span class="token operator">=</span> arg <span class="token keyword">instanceof</span> <span class="token class-name">JsonRpcProxyFactory</span> <span class="token operator">?</span> arg <span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">JsonRpcProxyFactory<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>\n<span class="line">        path<span class="token punctuation">,</span></span>\n<span class="line">        <span class="token function-variable function">onConnection</span><span class="token operator">:</span> c <span class="token operator">=&gt;</span> factory<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span></span>\n<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">    <span class="token keyword">return</span> factory<span class="token punctuation">.</span><span class="token function">createProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>后端</strong></p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token comment">// readonly factoryConstructor: new () =&gt; JsonRpcProxyFactory&lt;T&gt; = JsonRpcProxyFactory</span></span>\n<span class="line"><span class="token function">onConnection</span><span class="token punctuation">(</span>connection<span class="token operator">:</span> MessageConnection<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span></span>\n<span class="line">    <span class="token keyword">const</span> factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token keyword">this</span></span><span class="token punctuation">.</span><span class="token function">factoryConstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">    <span class="token keyword">const</span> proxy <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">createProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">    factory<span class="token punctuation">.</span>target <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">targetFactory</span><span class="token punctuation">(</span>proxy<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">    factory<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span>connection<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过上面的代码发现<code>JsonRpcProxyFactory</code>通过<code>createProxy</code>生成一个代理对象，可以理解为前后端对象的代理，通过操作此代理可以达到上述的效果，其中被代理的对象就是<code>target</code>。</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">JsonRpcProxyFactory<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> object<span class="token operator">&gt;</span></span> <span class="token keyword">implements</span> <span class="token class-name">ProxyHandler<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token punctuation">{</span></span>\n<span class="line">\t<span class="token comment">// ...</span></span>\n<span class="line">\t<span class="token doc-comment comment">/**</span>\n<span class="line">     * Build a new JsonRpcProxyFactory.</span>\n<span class="line">     *</span>\n<span class="line">     * <span class="token keyword">@param</span> <span class="token parameter">target</span> - The object to expose to JSON-RPC methods calls.  If this</span>\n<span class="line">     *   is omitted, the proxy won&#39;t be able to handle requests, only send them.</span>\n<span class="line">     */</span></span>\n<span class="line">    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token keyword">public</span> target<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">waitForConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line">\t<span class="token comment">// ...</span></span>\n<span class="line">\t<span class="token doc-comment comment">/**</span>\n<span class="line">     * Connect a MessageConnection to the factory.</span>\n<span class="line">     *</span>\n<span class="line">     * This connection will be used to send/receive JSON-RPC requests and</span>\n<span class="line">     * response.</span>\n<span class="line">     */</span></span>\n<span class="line">    <span class="token function">listen</span><span class="token punctuation">(</span>connection<span class="token operator">:</span> MessageConnection<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span></span>\n<span class="line">        connection<span class="token punctuation">.</span><span class="token function">onRequest</span><span class="token punctuation">(</span><span class="token punctuation">(</span>prop<span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">onRequest</span><span class="token punctuation">(</span>prop<span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">        connection<span class="token punctuation">.</span><span class="token function">onNotification</span><span class="token punctuation">(</span><span class="token punctuation">(</span>prop<span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">onNotification</span><span class="token punctuation">(</span>prop<span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">        connection<span class="token punctuation">.</span><span class="token function">onDispose</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">waitForConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">        connection<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">connectionPromiseResolve</span><span class="token punctuation">(</span>connection<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line">\t<span class="token doc-comment comment">/**</span>\n<span class="line">     * Process an incoming JSON-RPC method call.</span>\n<span class="line">     *</span>\n<span class="line">     * onRequest is called when the JSON-RPC connection received a method call</span>\n<span class="line">     * request.  It calls the corresponding method on [[target]].</span>\n<span class="line">     *</span>\n<span class="line">     * The return value is a Promise object that is resolved with the return</span>\n<span class="line">     * value of the method call, if it is successful.  The promise is rejected</span>\n<span class="line">     * if the called method does not exist or if it throws.</span>\n<span class="line">     *</span>\n<span class="line">     * <span class="token keyword">@returns</span> A promise of the method call completion.</span>\n<span class="line">     */</span></span>\n<span class="line">    <span class="token keyword">protected</span> <span class="token keyword">async</span> <span class="token function">onRequest</span><span class="token punctuation">(</span>method<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token comment">// ...</span></span>\n<span class="line">\t\t<span class="token keyword">return</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>target<span class="token punctuation">[</span>method<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">\t\t<span class="token comment">// ...</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line">\t<span class="token comment">// ...</span></span>\n<span class="line">\t<span class="token doc-comment comment">/**</span>\n<span class="line">     * Create a Proxy exposing the interface of an object of type T.  This Proxy</span>\n<span class="line">     * can be used to do JSON-RPC method calls on the remote target object as</span>\n<span class="line">     * if it was local.</span>\n<span class="line">     *</span>\n<span class="line">     * If `T` implements `JsonRpcServer` then a client is used as a target object for a remote target object.</span>\n<span class="line">     */</span></span>\n<span class="line">    <span class="token function">createProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> JsonRpcProxy<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token keyword">as</span> <span class="token builtin">any</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">        <span class="token keyword">return</span> result <span class="token keyword">as</span> <span class="token builtin">any</span><span class="token punctuation">;</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line"></span>\n<span class="line">\t<span class="token function">get</span><span class="token punctuation">(</span>target<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">,</span> p<span class="token operator">:</span> PropertyKey<span class="token punctuation">,</span> receiver<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">any</span> <span class="token punctuation">{</span></span>\n<span class="line">\t\t<span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">===</span> <span class="token string">&#39;setClient&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">            <span class="token keyword">return</span> <span class="token punctuation">(</span>client<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>\n<span class="line">                <span class="token keyword">this</span><span class="token punctuation">.</span>target <span class="token operator">=</span> client<span class="token punctuation">;</span></span>\n<span class="line">            <span class="token punctuation">}</span><span class="token punctuation">;</span></span>\n<span class="line">        <span class="token punctuation">}</span></span>\n<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">===</span> <span class="token string">&#39;getClient&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>target<span class="token punctuation">;</span></span>\n<span class="line">        <span class="token punctuation">}</span></span>\n<span class="line">\t\t<span class="token comment">// ...</span></span>\n<span class="line">\t\t<span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>\n<span class="line">\t\t\t<span class="token comment">// ...</span></span>\n<span class="line">\t\t\t<span class="token keyword">const</span> resultPromise <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">sendRequest</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">&gt;</span><span class="token punctuation">;</span></span>\n<span class="line">\t\t\t<span class="token comment">// ...</span></span>\n<span class="line">\t\t<span class="token punctuation">}</span></span>\n<span class="line">\t<span class="token punctuation">}</span></span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="前后端如何互相发送消息" tabindex="-1"><a class="header-anchor" href="#前后端如何互相发送消息"><span>前后端如何互相发送消息</span></a></h3><ul><li>可直接通过<code>channel.send(message)</code>发送消息</li><li>可通过代理对象的<code>get</code>方法</li></ul><p>通过<code>channel.send</code>在上面已经说过了，下面我们来看如何使用代理对象发送消息。</p><p>有上文创建代理对象的工厂函数可知，读取代理对象上的属性会触发内部声明的<code>get</code>方法，通过代码我们发现会执行到下面方法：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">const</span> resultPromise <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">sendRequest</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">&gt;</span><span class="token punctuation">;</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>其中<code>sendRequest</code>方法在<code>vscode-jsonrpc/lib/main.js</code>中，相关代码如下：</p><p><strong>vscode-jsonrpc/lib/main.js</strong></p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token function-variable function">sendRequest</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">type<span class="token punctuation">,</span> <span class="token operator">...</span>params</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>\n<span class="line">\t<span class="token comment">// ...</span></span>\n<span class="line">\tmessageWriter<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>requestMessage<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">\t<span class="token comment">// ...</span></span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>vscode-ws-jsonrpc/src/socket/writer.ts</strong></p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">WebSocketMessageWriter</span> <span class="token keyword">extends</span> <span class="token class-name">messageWriter_1</span><span class="token punctuation">.</span>AbstractMessageWriter <span class="token punctuation">{</span></span>\n<span class="line">    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token keyword">protected</span> <span class="token keyword">readonly</span> socket<span class="token operator">:</span> IWebSocket<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line">    <span class="token function">write</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token comment">// ...</span></span>\n<span class="line">\t\t<span class="token keyword">this</span><span class="token punctuation">.</span>socket<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">\t\t<span class="token comment">// ...</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>vscode-ws-jsonrpc/src/socket/connection.ts</strong></p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">createWebSocketConnection</span><span class="token punctuation">(</span>socket<span class="token operator">:</span> IWebSocket<span class="token punctuation">,</span> logger<span class="token operator">:</span> Logger<span class="token punctuation">)</span><span class="token operator">:</span> MessageConnection <span class="token punctuation">{</span></span>\n<span class="line">    <span class="token keyword">const</span> messageReader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebSocketMessageReader</span><span class="token punctuation">(</span>socket<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">    <span class="token keyword">const</span> messageWriter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebSocketMessageWriter</span><span class="token punctuation">(</span>socket<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">    <span class="token keyword">const</span> connection <span class="token operator">=</span> <span class="token function">createMessageConnection</span><span class="token punctuation">(</span>messageReader<span class="token punctuation">,</span> messageWriter<span class="token punctuation">,</span> logger<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">    connection<span class="token punctuation">.</span><span class="token function">onClose</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> connection<span class="token punctuation">.</span><span class="token function">dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">    <span class="token keyword">return</span> connection<span class="token punctuation">;</span></span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>createWebSocketConnection</code>则是在上文中通过<code>channel</code>创建<code>connection</code>的关键方法。</p><h3 id="小结" tabindex="-1"><a class="header-anchor" href="#小结"><span>小结</span></a></h3><p>至此已将theia的JSON-RPC大概的实现思路进行了介绍，包括前端和后端如何建立连接，如何互相发送消息和如何处理消息等。</p>',89)]))}]]),c=JSON.parse('{"path":"/AB%E4%BA%A7%E5%93%81%E7%9F%A5%E8%AF%86%E5%BA%93/%E7%9F%A5%E8%AF%86%E6%8E%A2%E7%B4%A2/%E5%89%8D%E7%AB%AF/Eclipse-Thiea/C%E7%AB%AF%E6%96%B0%E6%8A%80%E6%9C%AF%E8%B0%83%E7%A0%94%E7%AF%874%E8%A1%A5%E5%85%85%E7%AF%87%E2%80%94%E2%80%94Theia%20JSON-RPC%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90.html","title":"","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"1.什么是JSON-RPC","slug":"_1-什么是json-rpc","link":"#_1-什么是json-rpc","children":[]},{"level":2,"title":"2.theia的JSON-RPC","slug":"_2-theia的json-rpc","link":"#_2-theia的json-rpc","children":[{"level":3,"title":"原理图","slug":"原理图","link":"#原理图","children":[]},{"level":3,"title":"后端如何建立的WS服务并处理消息","slug":"后端如何建立的ws服务并处理消息","link":"#后端如何建立的ws服务并处理消息","children":[]},{"level":3,"title":"前端如何连接到后端的WS并处理消息","slug":"前端如何连接到后端的ws并处理消息","link":"#前端如何连接到后端的ws并处理消息","children":[]},{"level":3,"title":"JSON-RPC代理","slug":"json-rpc代理","link":"#json-rpc代理","children":[]},{"level":3,"title":"前后端如何互相发送消息","slug":"前后端如何互相发送消息","link":"#前后端如何互相发送消息","children":[]},{"level":3,"title":"小结","slug":"小结","link":"#小结","children":[]}]}],"git":{"updatedTime":1727145923000,"contributors":[{"name":"wangaoqi","email":"wangaoqi@agree.com.cn","commits":1}]},"filePathRelative":"AB产品知识库/知识探索/前端/Eclipse-Thiea/C端新技术调研篇4补充篇——Theia JSON-RPC源码分析.md"}')}}]);