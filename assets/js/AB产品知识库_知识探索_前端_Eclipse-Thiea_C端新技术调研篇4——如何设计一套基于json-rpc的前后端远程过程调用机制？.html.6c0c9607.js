"use strict";(self.webpackChunkmy_vuepress_site=self.webpackChunkmy_vuepress_site||[]).push([[122],{63836:(n,s,a)=>{a.r(s),a.d(s,{comp:()=>c,data:()=>l});var p=a(20641);const t=a.p+"assets/img/1.36055f90.png",e=a.p+"assets/img/2.61fff964.png",o={},c=(0,a(66262).A)(o,[["render",function(n,s){return(0,p.uX)(),(0,p.CE)("div",null,s[0]||(s[0]=[(0,p.Fv)('<h2 id="什么是rpc" tabindex="-1"><a class="header-anchor" href="#什么是rpc"><span>什么是RPC？</span></a></h2><ul><li>RPC（Remote Procedure Call）远程过程调用，简单的理解是一个节点请求另一个节点提供的服务。</li><li>本地过程调用：如果想要调用本地某个类的getName()方法，则只需要实现一个getName方法，并且直接通过运行本地程序执行对应代码即可。</li><li>远程过程调用：如果getName()方法在服务端，执行方法的方法体在远程服务器上，如何告诉服务器需要调用这个方法呢？一般来说：</li></ul><ol><li>首先客户端需要告诉服务器，需要调用的哪个类的哪个方法，这里类和方法和进程ID存在一个映射，客户端远程调用时，需要查一下方法，找到对应的ID，然后执行方法的代码。</li><li>客户端需要把本地参数传给远程方法，本地调用的过程中，直接压栈即可，但是在远程调用过程中不再同一个内存里，无法直接传递方法的参数，因此需要客户端把参数转换成字节流，传给服务端，然后服务端将字节流转换成自身能读取的格式，是一个序列化和反序列化的过程。</li><li>数据准备好了之后，如何进行传输？网络传输层需要把调用的ID和序列化后的参数传给服务端，然后把计算好的结果序列化传给客户端，即可完成一次调用过程。</li></ol><h2 id="json-rpc具体有哪些应用场景" tabindex="-1"><a class="header-anchor" href="#json-rpc具体有哪些应用场景"><span>json-rpc具体有哪些应用场景？</span></a></h2><p>vscode当中很多LSP都是基于json-rpc进行的，那么为此，vscode专门开发了一套json-rpc插件：<a href="https://www.npmjs.com/package/vscode-jsonrpc" target="_blank" rel="noopener noreferrer">vscode-jsonrpc</a>并在此基础上开发了基于websocket版本的<a href="https://www.npmjs.com/package/vscode-ws-jsonrpc" target="_blank" rel="noopener noreferrer">vscode-ws-jsonrpc</a>，本文则是基于该插件进行的相关机制的开发。</p><h2 id="先拿一个场景举例" tabindex="-1"><a class="header-anchor" href="#先拿一个场景举例"><span>先拿一个场景举例🌰：</span></a></h2><p>服务端有一个<code>GetHgService</code>的类，里面有个<code>getName()</code>方法</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">GetHgService</span> <span class="token keyword">implements</span> <span class="token class-name">GetHgServer</span> <span class="token punctuation">{</span></span>\n<span class="line"></span>\n<span class="line">    <span class="token keyword">private</span> client<span class="token operator">:</span> GetHgClient <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line">    <span class="token function">dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line">    getClient<span class="token operator">?</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> GetHgClient <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>client<span class="token punctuation">;</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line"></span>\n<span class="line">    <span class="token function">setClient</span><span class="token punctuation">(</span>client<span class="token operator">:</span> GetHgClient<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>client <span class="token operator">=</span> client</span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line">    <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;server-message:execute getName!&quot;</span><span class="token punctuation">)</span></span>\n<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>client<span class="token punctuation">.</span><span class="token function">onDone</span><span class="token punctuation">(</span><span class="token string">&quot;hg&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line">    <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;server-message:execute getAge!&quot;</span><span class="token punctuation">)</span></span>\n<span class="line">        <span class="token keyword">return</span> <span class="token string">&quot;32&quot;</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line"></span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，如果想要在客户端的浏览器里去调用这个方法：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> getHgService <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./frontend-application&quot;</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line">getHgService<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>服务端的控制台会输出：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">App listening on http://localhost:3155.</span>\n<span class="line">Opening channel for service path &#39;/services/search-in-workspace&#39;. [ID: 0]</span>\n<span class="line">server-message:execute getName!</span>\n<span class="line">server-message:execute getAge!</span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于服务端的getName方法里面调用了一个客户端的方法：<code>this.client.onDone()</code>，方法体如下：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">HGClient</span> <span class="token keyword">implements</span> <span class="token class-name">GetHgClient</span> <span class="token punctuation">{</span></span>\n<span class="line">    <span class="token function">onDone</span><span class="token punctuation">(</span>args<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;client-message:execute onDone!&quot;</span><span class="token punctuation">)</span></span>\n<span class="line">        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>args <span class="token operator">+</span> <span class="token string">&quot;done!&quot;</span><span class="token punctuation">)</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因此客户端浏览器里会输出：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">websocket open!</span>\n<span class="line">client-message:execute onDone!</span>\n<span class="line">hgdone!</span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>哇哦！完全就是两个独立的服务，竟然可以在客户端就像正常开发调用本地模块一样调用远程模块！这，就是一整套RPC调用。那么，为了实现这个机制，该如何设计呢？本文将详细阐述实现的过程。</p><h2 id="整体架构" tabindex="-1"><a class="header-anchor" href="#整体架构"><span>整体架构：</span></a></h2><p><img src="'+t+'" alt="json-rpc架构.png"> json-rpc整体调用过程设计如上图所示：</p><ul><li><strong>通讯层</strong></li><li>通讯层主要为服务端需要建立一套websocket链接，建立连接的过程，在设计上，可以使用<code>express</code>创建的服务器，其提供了对于协议升级的能力，可以接收客户端在建立连接握手阶段发起的websocket请求。随后，服务端可用<code>ws</code>模块来处理express的http服务upgrade后建立的一系列有关websocket的onOpen、onMessage、onError等监听事件的处理。 客户端需要指定服务端websocket的地址，可以使用<a href="https://github.com/pladaria/reconnecting-websocket" target="_blank" rel="noopener noreferrer">reconnecting-websocket</a>框架，其兼容了全部websocket API标准，高度配置化方式能力、跨平台特性、重连支持重定向URL、连接后支持分片缓存传输报文等能力可以较好的满足对接服务端websocket的需求。</li><li><strong>代理层</strong></li><li>代理层主要允许客户端和服务端利用其代理工厂创建代理对象。并且底层使用<a href="https://github.com/TypeFox/vscode-ws-jsonrpc" target="_blank" rel="noopener noreferrer">vscode-json-rpc</a>框架处理基于websocket的json-rpc通讯报文。代理层可以为客户端提供一个服务端的代理对象（反之亦然），允许服务端在构建一个RPC服务时，指定一个服务的URL，并且关联自身的一个实体对象或者类从而让客户端的代理对象可以通过访问该服务的URL来关联服务端的某个实体对象。</li><li><strong>接口层</strong></li><li>代理对象实际上就是接口层定义的服务端和客户端的具体接口，因此其属于公共模块。服务端对于接口中定义的方法需要进行具体实现，方便客户端代理对象进行调用(反之亦然)。</li><li><strong>服务层</strong></li><li>服务层主要是针对接口层进行具体的实现，从而客户端代理对象实际上是调用接口，服务端的具体服务的实现类会对接口进行实现（反之亦然）。</li><li><strong>调用层</strong></li><li>调度层面，客户端需要创建服务端的代理对象，如果服务端也会反向调用客户端的某些方法，那么也要将自身的客户端代理对象接口传递给服务端。而服务端则需要在调度层绑定好对应的实现类，以应对客户端发起的RPC请求进行具体实现类的分发。 ##详细设计： 首先，在通讯层，express会创建一个server服务：</li></ul><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token comment">//json-rpc-learn\\src\\server\\backend-application.ts</span></span>\n<span class="line"><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">BackendApplication</span> <span class="token punctuation">{</span></span>\n<span class="line"><span class="token keyword">protected</span> <span class="token keyword">readonly</span> app<span class="token operator">:</span> express<span class="token punctuation">.</span>Application <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"><span class="token keyword">async</span> <span class="token function">start</span><span class="token punctuation">(</span>aPort<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> aHostname<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>http<span class="token punctuation">.</span>Server <span class="token operator">|</span> https<span class="token punctuation">.</span>Server<span class="token operator">&gt;</span> <span class="token punctuation">{</span></span>\n<span class="line">\tserver <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>app<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">\t<span class="token keyword">new</span> <span class="token class-name">MessagingContribution</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>onStart<span class="token operator">!</span><span class="token punctuation">(</span>server<span class="token punctuation">)</span></span>\n<span class="line">\t<span class="token punctuation">}</span></span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述过程是将express创建的server服务传递给MessagingContibution类，该类用于进行对于http服务upgrade后绑定ws进行websocket处理的关键功能。 首先，初始化乐意歌MessagingContibution实例。该实例的构造函数如下：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token comment">//json-rpc-learn\\src\\server\\messaging-contribution.ts</span></span>\n<span class="line"><span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">ws</span><span class="token punctuation">(</span>WebSocketChannel<span class="token punctuation">.</span>wsPath<span class="token punctuation">,</span> <span class="token punctuation">(</span>_<span class="token punctuation">,</span> socket<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">handleChannels</span><span class="token punctuation">(</span>socket<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line"><span class="token function">ws</span><span class="token punctuation">(</span>spec<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token function-variable function">callback</span><span class="token operator">:</span> <span class="token punctuation">(</span>params<span class="token operator">:</span> MessagingService<span class="token punctuation">.</span>PathParams<span class="token punctuation">,</span> socket<span class="token operator">:</span> ws<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>wsHandlers<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>spec<span class="token punctuation">,</span> callback<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，实力的构造函数里，调用了ws方法。并且指定了一个websocket服务的根服务地址，比如本文，我们可以给这个wsPath赋值为<code>/service</code>，则客户端建立连接时，需要访问<code>ws://X.X.X.X:XXXX/service</code>。同时，ws方法还需要传入一个回调函数<code>(_,socket)=&gt;this.handleChannels(socket)</code>。也就是说ws会在某一时机，触发this.handleChannels(socket)的方法。至于是什么时机，我们再逐步往下分析。</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token comment">//json-rpc-learn\\src\\server\\messaging-contribution.ts</span></span>\n<span class="line"><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">MessagingContribution</span> <span class="token punctuation">{</span></span>\n<span class="line"><span class="token operator">...</span> <span class="token operator">...</span></span>\n<span class="line"><span class="token function">onStart</span><span class="token punctuation">(</span>server<span class="token operator">:</span> http<span class="token punctuation">.</span>Server <span class="token operator">|</span> https<span class="token punctuation">.</span>Server<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>webSocketServer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ws</span><span class="token punctuation">.</span><span class="token function">Server</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>\n<span class="line">            noServer<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>\n<span class="line">            perMessageDeflate<span class="token operator">:</span> <span class="token punctuation">{</span></span>\n<span class="line">                <span class="token comment">// don&#39;t compress if a message is less than 256kb</span></span>\n<span class="line">                threshold<span class="token operator">:</span> <span class="token number">256</span> <span class="token operator">*</span> <span class="token number">1024</span></span>\n<span class="line">            <span class="token punctuation">}</span></span>\n<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">        server<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;upgrade&#39;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">handleHttpUpgrade</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line">\t<span class="token operator">...</span> <span class="token operator">...</span></span>\n<span class="line">\t<span class="token punctuation">}</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在server接收到upgrade请求后，MessagingContribution会分发给<code>handleHttpUpgrade</code>方法进行处理：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token comment">//json-rpc-learn\\src\\server\\messaging-contribution.ts</span></span>\n<span class="line"><span class="token keyword">protected</span> <span class="token function">handleHttpUpgrade</span><span class="token punctuation">(</span>request<span class="token operator">:</span> http<span class="token punctuation">.</span>IncomingMessage<span class="token punctuation">,</span> socket<span class="token operator">:</span> net<span class="token punctuation">.</span>Socket<span class="token punctuation">,</span> head<span class="token operator">:</span> Buffer<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token keyword">try</span> <span class="token punctuation">{</span></span>\n<span class="line">            <span class="token keyword">this</span><span class="token punctuation">.</span>webSocketServer<span class="token operator">!</span><span class="token punctuation">.</span><span class="token function">handleUpgrade</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> socket<span class="token punctuation">,</span> head<span class="token punctuation">,</span> client <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>\n<span class="line">                <span class="token keyword">this</span><span class="token punctuation">.</span>webSocketServer<span class="token operator">!</span><span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">&#39;connection&#39;</span><span class="token punctuation">,</span> client<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">                <span class="token comment">// this.messagingListener.onDidWebSocketUpgrade(request, client); //当监听到有upgrade操作时，会触发某些监听器的回调</span></span>\n<span class="line">            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">            <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">            socket<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&#39;HTTP/1.1 500 Internal Error\\n\\n&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">            socket<span class="token punctuation">.</span><span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">        <span class="token punctuation">}</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在<code>handleHttpUpgrade</code>方法中，ws模块会抛出一个connection事件，而ws在建立连接时，也对connection事件进行了监听，则触发了后续建立链接的逻辑。</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token function">onStart</span><span class="token punctuation">(</span>server<span class="token operator">:</span> http<span class="token punctuation">.</span>Server <span class="token operator">|</span> https<span class="token punctuation">.</span>Server<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span></span>\n<span class="line"><span class="token operator">...</span> <span class="token operator">...</span></span>\n<span class="line">\t<span class="token keyword">this</span><span class="token punctuation">.</span>webSocketServer<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;connection&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>socket<span class="token operator">:</span> CheckAliveWS<span class="token punctuation">,</span> request<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>\n<span class="line">\t\t\t\tsocket<span class="token punctuation">.</span>alive <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>\n<span class="line">\t\t\t\tsocket<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;pong&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> socket<span class="token punctuation">.</span>alive <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">\t\t\t\t<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">handleConnection</span><span class="token punctuation">(</span>socket<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">\t\t\t<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"><span class="token operator">...</span> <span class="token operator">...</span></span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>而在connection的监听里，会分发给handleConnection方法，后续将会对这一方法在调度层的讲解中详细介绍。让我们再回到通讯层的客户端角度，看看都做了什么。首先，客户端会建立与服务端的websocket连接：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token comment">//json-rpc-learn\\src\\client\\ws-connection-provider.ts</span></span>\n<span class="line"><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">WebSocketConnectionProvider</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractConnectionProvider<span class="token operator">&lt;</span>WebSocketOptions<span class="token operator">&gt;</span></span> <span class="token punctuation">{</span></span>\n<span class="line">\t<span class="token function">constructor</span><span class="token punctuation">(</span>port<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">\t\t\t<span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">\t\t\t<span class="token keyword">this</span><span class="token punctuation">.</span>port <span class="token operator">=</span> port<span class="token punctuation">;</span></span>\n<span class="line">\t\t\t<span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">createWebSocketUrl</span><span class="token punctuation">(</span><span class="token string">&quot;/services&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">\t\t\t<span class="token keyword">const</span> socket <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">createWebSocket</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">\t<span class="token punctuation">}</span></span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在创建与服务端的websocket链接时，使用了<code>reconnecting-websocket</code>框架：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token comment">// json-rpc-learn\\src\\client\\ws-connection-provider.ts</span></span>\n<span class="line"><span class="token keyword">protected</span> <span class="token function">createWebSocket</span><span class="token punctuation">(</span>url<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> ReconnectingWebSocket <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ReconnectingWebSocket</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span>\n<span class="line">            WebSocket<span class="token operator">:</span> <span class="token constant">WS</span><span class="token punctuation">,</span></span>\n<span class="line">            maxReconnectionDelay<span class="token operator">:</span> <span class="token number">10000</span><span class="token punctuation">,</span></span>\n<span class="line">            minReconnectionDelay<span class="token operator">:</span> <span class="token number">1000</span><span class="token punctuation">,</span></span>\n<span class="line">            reconnectionDelayGrowFactor<span class="token operator">:</span> <span class="token number">1.3</span><span class="token punctuation">,</span></span>\n<span class="line">            connectionTimeout<span class="token operator">:</span> <span class="token number">10000</span><span class="token punctuation">,</span></span>\n<span class="line">            maxRetries<span class="token operator">:</span> <span class="token number">Infinity</span><span class="token punctuation">,</span></span>\n<span class="line">            debug<span class="token operator">:</span> <span class="token boolean">false</span></span>\n<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由此，客户端便可以与服务端建立链接了。 接下来，在代理层，首先我们先从上文通讯层入手，通讯层服务端<code>ws</code>模块在<code>connection</code>的监听里，会分发给<code>handleConnection</code>方法，这里面具体做了什么呢？ 由于所有的请求都是通过一个<code>websocket</code>通道进行分发，那么为了区分各个服务请求，则在<code>url</code>中需要依据后面的服务名来区分调度不同的服务进行处理。比如，当我们发送<code>ws://127.0.0.1:8001/service/crownhuang</code>，则可以在此通过判断服务路径来分发给具体的<code>/services/crownhuang</code>服务来处理，很类似springmvc中的service分发机制。<code>handleConnection</code>主要就是用来根据请求的url路由路径进行服务分发：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token comment">// json-rpc-learn\\src\\server\\messaging-contribution.ts</span></span>\n<span class="line"><span class="token keyword">protected</span> <span class="token function">handleConnection</span><span class="token punctuation">(</span>socket<span class="token operator">:</span> ws<span class="token punctuation">,</span> request<span class="token operator">:</span> http<span class="token punctuation">.</span>IncomingMessage<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token keyword">const</span> pathname <span class="token operator">=</span> request<span class="token punctuation">.</span>url <span class="token operator">&amp;&amp;</span> url<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span>pathname<span class="token punctuation">;</span></span>\n<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>pathname <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>wsHandlers<span class="token punctuation">.</span><span class="token function">route</span><span class="token punctuation">(</span>pathname<span class="token punctuation">,</span> socket<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">            <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&#39;Cannot find a ws handler for the path: &#39;</span> <span class="token operator">+</span> pathname<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">        <span class="token punctuation">}</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>方法会根据传入<code>request</code>请求的<code>url</code>从<code>wsHandler</code>数组里面取出来转发给具体处理的服务。上文说到，在<code>MessagingContribution</code>的构造函数中，会往wsHandler里存入wsPath，也就是<code>/services</code>，这就是所谓的一级路由。wsHandler整体会根据不同的一级路由名称来存储很多服务处理的回调。同时，ws方法还需要传入一个回调函数<code>(_,socket)=&gt;this.handleChannels(socket)</code>。那么，当客户端访问<code>ws://x.x.x.x:xxxx/services</code>，在握手建立连接阶段，服务端触发<code>route</code>方法时，其会根据此次<code>service</code>服务的一级路由首先触发到对应的回调函数<code>(_,socket)=&gt;this.handleChannels(socket)</code>，并且把当前的socket链接传给<code>this.handleChannels</code>里。<code>route</code>方法如下：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token comment">// json-rpc-learn\\src\\server\\messaging-contribution.ts</span></span>\n<span class="line"><span class="token function">route</span><span class="token punctuation">(</span>path<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> connection<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token boolean">false</span> <span class="token punctuation">{</span></span>\n<span class="line">            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> handler <span class="token keyword">of</span> <span class="token keyword">this</span><span class="token punctuation">.</span>handlers<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">                <span class="token keyword">try</span> <span class="token punctuation">{</span></span>\n<span class="line">                    <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">handler</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> connection<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">                    <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">                        <span class="token keyword">return</span> result<span class="token punctuation">;</span></span>\n<span class="line">                    <span class="token punctuation">}</span></span>\n<span class="line">                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">                    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">                <span class="token punctuation">}</span></span>\n<span class="line">            <span class="token punctuation">}</span></span>\n<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>parent<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">                <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>parent<span class="token punctuation">.</span><span class="token function">route</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> connection<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">            <span class="token punctuation">}</span></span>\n<span class="line">            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span></span>\n<span class="line">        <span class="token punctuation">}</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面，我们就继续分析<code>this.handleChannels(socket)</code>方法的功能。</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token comment">// json-rpc-learn\\src\\server\\messaging-contribution.ts</span></span>\n<span class="line"><span class="token keyword">protected</span> <span class="token function">handleChannels</span><span class="token punctuation">(</span>socket<span class="token operator">:</span> ws<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token keyword">const</span> channelHandlers <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getConnectionChannelHandlers</span><span class="token punctuation">(</span>socket<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">        <span class="token keyword">const</span> channels <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map<span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token punctuation">,</span> WebSocketChannel<span class="token operator">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">        socket<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;message&#39;</span><span class="token punctuation">,</span> data <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>\n<span class="line">            <span class="token keyword">try</span> <span class="token punctuation">{</span></span>\n<span class="line">                <span class="token keyword">const</span> message<span class="token operator">:</span> WebSocketChannel<span class="token punctuation">.</span>Message <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">                <span class="token keyword">if</span> <span class="token punctuation">(</span>message<span class="token punctuation">.</span>kind <span class="token operator">===</span> <span class="token string">&#39;open&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">                    <span class="token keyword">const</span> <span class="token punctuation">{</span> id<span class="token punctuation">,</span> path <span class="token punctuation">}</span> <span class="token operator">=</span> message<span class="token punctuation">;</span></span>\n<span class="line">                    <span class="token keyword">const</span> channel <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">createChannel</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> socket<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">                    <span class="token keyword">if</span> <span class="token punctuation">(</span>channelHandlers<span class="token punctuation">.</span><span class="token function">route</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> channel<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">                        channel<span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">                        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Opening channel for service path &#39;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>path<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&#39;. [ID: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">]</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">                        channels<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> channel<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">                        channel<span class="token punctuation">.</span><span class="token function">onClose</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>\n<span class="line">                            <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Closing channel on service path &#39;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>path<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&#39;. [ID: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">]</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">                            channels<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">                        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>\n<span class="line">                        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&#39;Cannot find a service for the path: &#39;</span> <span class="token operator">+</span> path<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">                    <span class="token punctuation">}</span></span>\n<span class="line">                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>\n<span class="line">                    <span class="token keyword">const</span> <span class="token punctuation">{</span> id <span class="token punctuation">}</span> <span class="token operator">=</span> message<span class="token punctuation">;</span></span>\n<span class="line">                    <span class="token keyword">const</span> channel <span class="token operator">=</span> channels<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">                    <span class="token keyword">if</span> <span class="token punctuation">(</span>channel<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">                        channel<span class="token punctuation">.</span><span class="token function">handleMessage</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>\n<span class="line">                        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&#39;The ws channel does not exist&#39;</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">                    <span class="token punctuation">}</span></span>\n<span class="line">                <span class="token punctuation">}</span></span>\n<span class="line">            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">                <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&#39;Failed to handle message&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> error<span class="token punctuation">,</span> data <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">            <span class="token punctuation">}</span></span>\n<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">        socket<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;error&#39;</span><span class="token punctuation">,</span> err <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token comment">//...... 省略</span></span>\n<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">        socket<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;close&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>code<span class="token punctuation">,</span> reason<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token comment">//...... 省略</span></span>\n<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先，从大框上看，主要是对于传入的socket链接进行相关生命周期函数的处理。但是最开始的一段代码，调用了一下<code>this.getConnectionChannelHandlers(socket);</code>方法，该方法如下：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token comment">// json-rpc-learn\\src\\server\\messaging-contribution.ts</span></span>\n<span class="line"><span class="token keyword">protected</span> <span class="token function">getConnectionChannelHandlers</span><span class="token punctuation">(</span>socket<span class="token operator">:</span> ws<span class="token punctuation">)</span><span class="token operator">:</span> MessagingContribution<span class="token punctuation">.</span>ConnectionHandlers<span class="token operator">&lt;</span>WebSocketChannel<span class="token operator">&gt;</span> <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token keyword">const</span> connectionChannelHandlers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MessagingContribution</span><span class="token punctuation">.</span><span class="token function">ConnectionHandlers</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>channelHandlers<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">        connectionChannelHandlers<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>HgServiceConnectionhandler<span class="token punctuation">.</span>path<span class="token punctuation">,</span> <span class="token punctuation">(</span>_<span class="token punctuation">,</span> channel<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>\n<span class="line">            <span class="token keyword">const</span> connection <span class="token operator">=</span> <span class="token function">createWebSocketConnection</span><span class="token punctuation">(</span>channel<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ConsoleLogger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">            HgServiceConnectionhandler<span class="token punctuation">.</span><span class="token function">onConnection</span><span class="token punctuation">(</span>connection<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">        <span class="token keyword">return</span> connectionChannelHandlers<span class="token punctuation">;</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码有些晦涩难懂，但是有一个很熟悉的地方，则是在该方法内，又new了一个connectionHandler实例，这与刚开始讲到的wsHanlder的实例：<code>protected readonly channelHandlers = new MessagingContribution.ConnectionHandlers&lt;WebSocketChannel&gt;();</code>属于统一类，那么两者的区别是什么呢？通过代码看到，在这次的push方法中，传入的是HgServiceConnectionhandler.path，其具体为<code>export const HG_WS_PATH = &#39;/services/hg-service&#39;;</code>，原来，在一级路由的回调里，我们又针对于二级路由进行了回调的绑定，一个一级路由下则也可以允许绑定多个二级路由，上述代码里则指绑定了一个HgService的二级路由，如果后续有多个二级路由，则都需要在此方法里进行绑定。那么一旦客户端建立链接访问了<code>ws://x.x.x.x:xxxx/service/hg-service</code>，则会触发上述代码块中的<code>(_,channel)={}</code>回调函数部分。 其会根据二级路由地址，遍历<code>channelHandlers</code>数组，看是否有匹配的服务用于处理该请求。<code>channelHandlers</code>数组则是在建立连接的过程中将不同的服务实例传入进去的。比如，上述代码我们创建了一个<code>HgService</code>的服务，将实例的路径(<code>HgServiceConnectionhandler.path</code>)和监听到已经建立链接的处理方法(<code>(_,channel)=&gt;{...}</code>)通过上面的代码传入到<code>channelHandlers</code>当中。 在收到消息时，先根据消息<code>kind</code>判断是第一次打开还是已经打开，如果是<code>open</code>，则通过<code>path</code>判断是否在<code>channelHandlers</code>中存在，也就是是否注册过，如：<code>new JsonRpcConnectionHandler&lt;GetHgClient&gt;(&quot;/services/hg-service&quot;, client =&gt; {</code>，其中<code>path</code>为<code>&quot;/services/hg-service&quot;</code>，如果注册过则通过唯一的<code>id</code>保存到叫做<code>channels</code>的<code>Map</code>中；如果非<code>open</code>，则从<code>Map</code>中获取对应的<code>channel</code>并调用其<code>handleMessage</code>方法进行消息处理。</p><blockquote><p>其中<code>id</code>为<code>vscode-ws-jsonrpc</code>包生成的数据格式中的一个字段，在<code>open</code>时并非JSON-RPC，而在非<code>open</code>时的<code>message</code>则为JSON-RPC格式的数据，同样由<code>vscode-ws-jsonrpc</code>生成。</p></blockquote><blockquote><p>有关<code>channel</code>的内容会在后文提到。</p></blockquote><h4 id="后端如何处理消息" tabindex="-1"><a class="header-anchor" href="#后端如何处理消息"><span>后端如何处理消息</span></a></h4><p>在看后端如何处理消息前，需要先了解<code>channel</code>是什么，下面我们通过下面的代码切入：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">const</span> channel <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">createChannel</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> socket<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>上面代码创建了一个<code>channel</code>，实现入下：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">protected</span> <span class="token function">createChannel</span><span class="token punctuation">(</span>id<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> socket<span class="token operator">:</span> ws<span class="token punctuation">)</span><span class="token operator">:</span> WebSocketChannel <span class="token punctuation">{</span></span>\n<span class="line">    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">WebSocketChannel</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> content <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>socket<span class="token punctuation">.</span>readyState <span class="token operator">&lt;</span> ws<span class="token punctuation">.</span><span class="token constant">CLOSING</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">            socket<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>content<span class="token punctuation">,</span> err <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>\n<span class="line">                <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">                    <span class="token keyword">throw</span> err<span class="token punctuation">;</span></span>\n<span class="line">                <span class="token punctuation">}</span></span>\n<span class="line">            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">        <span class="token punctuation">}</span></span>\n<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里我们发现这个<code>channel</code>实际上是一个<code>WebSocketChannel</code>，下面我们看<code>WebSocketChannel</code>的代码：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">WebSocketChannel</span> <span class="token keyword">implements</span> <span class="token class-name">IWebSocket</span> <span class="token punctuation">{</span></span>\n<span class="line">\t<span class="token keyword">static</span> wsPath <span class="token operator">=</span> <span class="token string">&#39;/services&#39;</span><span class="token punctuation">;</span></span>\n<span class="line">\t<span class="token comment">// ...</span></span>\n<span class="line">\t<span class="token function">constructor</span><span class="token punctuation">(</span></span>\n<span class="line">        <span class="token keyword">readonly</span> id<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span></span>\n<span class="line">        <span class="token keyword">protected</span> <span class="token keyword">readonly</span> <span class="token function-variable function">doSend</span><span class="token operator">:</span> <span class="token punctuation">(</span>content<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span></span>\n<span class="line">    <span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span></span>\n<span class="line">\t<span class="token comment">// ...</span></span>\n<span class="line">\t<span class="token function">handleMessage</span><span class="token punctuation">(</span>message<span class="token operator">:</span> WebSocketChannel<span class="token punctuation">.</span>Message<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>message<span class="token punctuation">.</span>kind <span class="token operator">===</span> <span class="token string">&#39;ready&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">fireOpen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>message<span class="token punctuation">.</span>kind <span class="token operator">===</span> <span class="token string">&#39;data&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">fireMessage</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>message<span class="token punctuation">.</span>kind <span class="token operator">===</span> <span class="token string">&#39;close&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">fireClose</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span>code<span class="token punctuation">,</span> message<span class="token punctuation">.</span>reason<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">        <span class="token punctuation">}</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line"></span>\n<span class="line">\t<span class="token function">open</span><span class="token punctuation">(</span>path<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">checkNotDisposed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">doSend</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>WebSocketChannel<span class="token punctuation">.</span>OpenMessage<span class="token operator">&gt;</span><span class="token punctuation">{</span></span>\n<span class="line">            kind<span class="token operator">:</span> <span class="token string">&#39;open&#39;</span><span class="token punctuation">,</span></span>\n<span class="line">            id<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>id<span class="token punctuation">,</span></span>\n<span class="line">            path</span>\n<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line"></span>\n<span class="line">\t<span class="token function">ready</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">checkNotDisposed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">doSend</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>WebSocketChannel<span class="token punctuation">.</span>ReadyMessage<span class="token operator">&gt;</span><span class="token punctuation">{</span></span>\n<span class="line">            kind<span class="token operator">:</span> <span class="token string">&#39;ready&#39;</span><span class="token punctuation">,</span></span>\n<span class="line">            id<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>id</span>\n<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line"></span>\n<span class="line">    <span class="token function">send</span><span class="token punctuation">(</span>content<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">checkNotDisposed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">doSend</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>WebSocketChannel<span class="token punctuation">.</span>DataMessage<span class="token operator">&gt;</span><span class="token punctuation">{</span></span>\n<span class="line">            kind<span class="token operator">:</span> <span class="token string">&#39;data&#39;</span><span class="token punctuation">,</span></span>\n<span class="line">            id<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>id<span class="token punctuation">,</span></span>\n<span class="line">            content</span>\n<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line">\t<span class="token comment">// ...</span></span>\n<span class="line">\t<span class="token keyword">protected</span> <span class="token function-variable function">fireOpen</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function-variable function">void</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>\n<span class="line">    <span class="token function">onOpen</span><span class="token punctuation">(</span><span class="token function-variable function">cb</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">checkNotDisposed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>fireOpen <span class="token operator">=</span> cb<span class="token punctuation">;</span></span>\n<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>toDispose<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>Disposable<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">fireOpen</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line"></span>\n<span class="line">    <span class="token keyword">protected</span> <span class="token function-variable function">fireMessage</span><span class="token operator">:</span> <span class="token punctuation">(</span>data<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function-variable function">void</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>\n<span class="line">    <span class="token function">onMessage</span><span class="token punctuation">(</span><span class="token function-variable function">cb</span><span class="token operator">:</span> <span class="token punctuation">(</span>data<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">checkNotDisposed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>fireMessage <span class="token operator">=</span> cb<span class="token punctuation">;</span></span>\n<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>toDispose<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>Disposable<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">fireMessage</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line">\t<span class="token comment">// ...</span></span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着回到上面处理消息的代码，如下：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line">channel<span class="token punctuation">.</span><span class="token function">handleMessage</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>表示在接到消息后传递给了<code>channel</code>的<code>handleMessage</code>方法处理，并且可以通过<code>WebSocketChannel</code>找到处理函数的实现，这里我们看处理JSON-RPC消息的部分，如下：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>message<span class="token punctuation">.</span>kind <span class="token operator">===</span> <span class="token string">&#39;data&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">fireMessage</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但是却没在工程中找到<code>fireMessage</code>方法的定义，其实这个方法可以通过<code>channel</code>的<code>onMessage</code>方法进行赋值，这里在<code>vscode-ws-jsonrpc</code>会有一次赋值，如下：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token comment">//vscode-ws-jsonrpc/src/socket/reader.ts</span></span>\n<span class="line"><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">WebSocketMessageReader</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractMessageReader</span> <span class="token punctuation">{</span></span>\n<span class="line">\t<span class="token comment">// ...</span></span>\n<span class="line">\t<span class="token function">constructor</span><span class="token punctuation">(</span><span class="token keyword">protected</span> <span class="token keyword">readonly</span> socket<span class="token operator">:</span> IWebSocket<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>socket<span class="token punctuation">.</span><span class="token function">onMessage</span><span class="token punctuation">(</span>message <span class="token operator">=&gt;</span></span>\n<span class="line">            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">readMessage</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span></span>\n<span class="line">        <span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">\t\t<span class="token comment">// ...</span></span>\n<span class="line">\t<span class="token punctuation">}</span></span>\n<span class="line">\t<span class="token comment">// ...</span></span>\n<span class="line">\t<span class="token keyword">protected</span> <span class="token function">readMessage</span><span class="token punctuation">(</span>message<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">===</span> <span class="token string">&#39;initial&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">            <span class="token keyword">this</span><span class="token punctuation">.</span>events<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> message <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">===</span> <span class="token string">&#39;listening&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">            <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">            <span class="token keyword">this</span><span class="token punctuation">.</span>callback<span class="token operator">!</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">        <span class="token punctuation">}</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line">\t<span class="token comment">// ...</span></span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最终通过<code>vscode-jsonrpc</code>会触发上文代码块，何时触发呢？就是当接收到请求，触发<code>fireMessage</code>时，实际上调用的则是vscode-ws-jsonrpc插件中reader类的<code>readMessage</code>的方法。<code>readMessage</code>里调用了<code>this.callback!(data)</code>，实际上是在下文<code>JsonRpcProxyFactory</code>中调用listen方法时，执行<code>connection.listen();</code>绑定的<code>callback</code>，那么这个<code>listen</code>方法主要关联了什么呢？vscode-jsonrpc内部指定了一系列的消息类型，<code>Request</code>，<code>Notification</code>，<code>Disposable</code>等，在<code>JsonRpcProxyFactory</code>中对于这些消息类型的响应函数处理，则是在listen方法中进行的。详细代码见下文：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token comment">// json-rpc-learn\\src\\server\\messaging-contribution.ts</span></span>\n<span class="line">connectionChannelHandlers<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>HgServiceConnectionhandler<span class="token punctuation">.</span>path<span class="token punctuation">,</span> <span class="token punctuation">(</span>_<span class="token punctuation">,</span> channel<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>\n<span class="line">            <span class="token keyword">const</span> connection <span class="token operator">=</span> <span class="token function">createWebSocketConnection</span><span class="token punctuation">(</span>channel<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ConsoleLogger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">            HgServiceConnectionhandler<span class="token punctuation">.</span><span class="token function">onConnection</span><span class="token punctuation">(</span>connection<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line"></span>\n<span class="line"><span class="token comment">//</span></span>\n<span class="line"><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">JsonRpcConnectionHandler<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> object<span class="token operator">&gt;</span></span> <span class="token keyword">implements</span> <span class="token class-name">ConnectionHandler</span> <span class="token punctuation">{</span></span>\n<span class="line">    <span class="token function">constructor</span><span class="token punctuation">(</span></span>\n<span class="line">\t<span class="token operator">...</span> <span class="token operator">...</span></span>\n<span class="line">    <span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span></span>\n<span class="line"></span>\n<span class="line">    <span class="token function">onConnection</span><span class="token punctuation">(</span>connection<span class="token operator">:</span> MessageConnection<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token keyword">const</span> factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token keyword">this</span></span><span class="token punctuation">.</span><span class="token function">factoryConstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">        <span class="token keyword">const</span> proxy <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">createProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">        factory<span class="token punctuation">.</span>target <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">targetFactory</span><span class="token punctuation">(</span>proxy<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">        factory<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span>connection<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">JsonRpcProxyFactory<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> object<span class="token operator">&gt;</span></span> <span class="token keyword">implements</span> <span class="token class-name">ProxyHandler<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token punctuation">{</span></span>\n<span class="line">\t<span class="token function">listen</span><span class="token punctuation">(</span>connection<span class="token operator">:</span> MessageConnection<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span></span>\n<span class="line">\t\t\tconnection<span class="token punctuation">.</span><span class="token function">onRequest</span><span class="token punctuation">(</span><span class="token punctuation">(</span>prop<span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">onRequest</span><span class="token punctuation">(</span>prop<span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">\t\t\tconnection<span class="token punctuation">.</span><span class="token function">onNotification</span><span class="token punctuation">(</span><span class="token punctuation">(</span>prop<span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">onNotification</span><span class="token punctuation">(</span>prop<span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">\t\t\tconnection<span class="token punctuation">.</span><span class="token function">onDispose</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">waitForConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">\t\t\tconnection<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">\t\t\t<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">connectionPromiseResolve</span><span class="token punctuation">(</span>connection<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">\t\t<span class="token punctuation">}</span></span>\n<span class="line">\t<span class="token punctuation">}</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>那么，一旦绑定好listen，其实就将服务端应用层实现的处理各种请求、通知、销毁的回调函数实现与vscode-ws-jsonrpc关联完成了，一旦服务端收到请求，则会触发callback，并且vscode-ws-jsonrpc会将所有处理的请求放置在一个消息队列中，逐步根据请求类型来触发应用层的回调函数。接下来，我们就将详细介绍整个前后端处理消息的过程。</p><h3 id="前端如何连接到后端的ws并处理json-rpc消息" tabindex="-1"><a class="header-anchor" href="#前端如何连接到后端的ws并处理json-rpc消息"><span>前端如何连接到后端的WS并处理json-rpc消息</span></a></h3><h3 id="调用过程" tabindex="-1"><a class="header-anchor" href="#调用过程"><span>调用过程：</span></a></h3><p><img src="'+e+'" alt="前后端调用proxy-rpc.png"> 通过JSON-RPC代理可以实现在客户端直接调用服务端方法及服务端直接调用客户端方法。下面通过theia中的一段代码注释即可对用法有个大概认识。</p><p><strong>proxy-factory.ts</strong></p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token doc-comment comment">/**</span>\n<span class="line"> * Factory for JSON-RPC proxy objects.</span>\n<span class="line"> *</span>\n<span class="line"> * A JSON-RPC proxy exposes the programmatic interface of an object through</span>\n<span class="line"> * JSON-RPC.  This allows remote programs to call methods of this objects by</span>\n<span class="line"> * sending JSON-RPC requests.  This takes place over a bi-directional stream,</span>\n<span class="line"> * where both ends can expose an object and both can call methods each other&#39;s</span>\n<span class="line"> * exposed object.</span>\n<span class="line"> *</span>\n<span class="line"> * For example, assuming we have an object of the following type on one end:</span>\n<span class="line"> *</span>\n<span class="line"> *     class Foo <span class="token punctuation">{</span></span>\n<span class="line"> *         bar(baz: number): number <span class="token punctuation">{</span> return baz + 1 <span class="token punctuation">}</span></span>\n<span class="line"> *     <span class="token punctuation">}</span></span>\n<span class="line"> *</span>\n<span class="line"> * which we want to expose through a JSON-RPC interface.  We would do:</span>\n<span class="line"> *</span>\n<span class="line"> *     let target = new Foo()</span>\n<span class="line"> *     let factory = new JsonRpcProxyFactory&lt;Foo&gt;(&#39;/foo&#39;, target)</span>\n<span class="line"> *     factory.onConnection(connection)</span>\n<span class="line"> *</span>\n<span class="line"> * The party at the other end of the `connection`, in order to remotely call</span>\n<span class="line"> * methods on this object would do:</span>\n<span class="line"> *</span>\n<span class="line"> *     let factory = new JsonRpcProxyFactory&lt;Foo&gt;(&#39;/foo&#39;)</span>\n<span class="line"> *     factory.onConnection(connection)</span>\n<span class="line"> *     let proxy = factory.createProxy();</span>\n<span class="line"> *     let result = proxy.bar(42)</span>\n<span class="line"> *     // result is equal to 43</span>\n<span class="line"> *</span>\n<span class="line"> * One the wire, it would look like this:</span>\n<span class="line"> *</span>\n<span class="line"> *     --&gt; <span class="token punctuation">{</span>&quot;jsonrpc&quot;: &quot;2.0&quot;, &quot;id&quot;: 0, &quot;method&quot;: &quot;bar&quot;, &quot;params&quot;: <span class="token punctuation">{</span>&quot;baz&quot;: 42<span class="token punctuation">}</span><span class="token punctuation">}</span></span>\n<span class="line"> *     &lt;-- <span class="token punctuation">{</span>&quot;jsonrpc&quot;: &quot;2.0&quot;, &quot;id&quot;: 0, &quot;result&quot;: 43<span class="token punctuation">}</span></span>\n<span class="line"> *</span>\n<span class="line"> * Note that in the code of the caller, we didn&#39;t pass a target object to</span>\n<span class="line"> * JsonRpcProxyFactory, because we don&#39;t want/need to expose an object.</span>\n<span class="line"> * If we had passed a target object, the other side could&#39;ve called methods on</span>\n<span class="line"> * it.</span>\n<span class="line"> *</span>\n<span class="line"> * <span class="token keyword">@param</span> &lt;T&gt; - The type of the object to expose to JSON-RPC.</span>\n<span class="line"> */</span></span>\n<span class="line"><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">JsonRpcProxyFactory<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> object<span class="token operator">&gt;</span></span> <span class="token keyword">implements</span> <span class="token class-name">ProxyHandler<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token punctuation">{</span></span>\n<span class="line">\t<span class="token comment">// ...</span></span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>那么是具体是如何实现这种效果的呢？下面结合用法一点一点来看<code>JsonRpcProxyFactory</code>到底是做了什么事。回到上面使用的地方，当前端准备与服务端建立链接，前端与后端建立连接主要代码如下：</p><p><strong>前端</strong></p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token generic-function"><span class="token function">createProxy</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> object<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>path<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> arg<span class="token operator">?</span><span class="token operator">:</span> object<span class="token punctuation">)</span><span class="token operator">:</span> JsonRpcProxy<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span></span>\n<span class="line">    <span class="token keyword">const</span> factory <span class="token operator">=</span> arg <span class="token keyword">instanceof</span> <span class="token class-name">JsonRpcProxyFactory</span> <span class="token operator">?</span> arg <span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">JsonRpcProxyFactory<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>\n<span class="line">        path<span class="token punctuation">,</span></span>\n<span class="line">        <span class="token function-variable function">onConnection</span><span class="token operator">:</span> c <span class="token operator">=&gt;</span> factory<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span></span>\n<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">    <span class="token keyword">return</span> factory<span class="token punctuation">.</span><span class="token function">createProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>后端</strong></p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token comment">// readonly factoryConstructor: new () =&gt; JsonRpcProxyFactory&lt;T&gt; = JsonRpcProxyFactory</span></span>\n<span class="line"><span class="token function">onConnection</span><span class="token punctuation">(</span>connection<span class="token operator">:</span> MessageConnection<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span></span>\n<span class="line">    <span class="token keyword">const</span> factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token keyword">this</span></span><span class="token punctuation">.</span><span class="token function">factoryConstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">    <span class="token keyword">const</span> proxy <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">createProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">    factory<span class="token punctuation">.</span>target <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">targetFactory</span><span class="token punctuation">(</span>proxy<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">    factory<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span>connection<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过上面的代码发现<code>JsonRpcProxyFactory</code>通过<code>createProxy</code>生成一个代理对象，可以理解为前后端对象的代理，通过操作此代理可以达到上述的效果，其中被代理的对象就是<code>target</code>。</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">JsonRpcProxyFactory<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> object<span class="token operator">&gt;</span></span> <span class="token keyword">implements</span> <span class="token class-name">ProxyHandler<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token punctuation">{</span></span>\n<span class="line">\t<span class="token comment">// ...</span></span>\n<span class="line">\t<span class="token doc-comment comment">/**</span>\n<span class="line">     * Build a new JsonRpcProxyFactory.</span>\n<span class="line">     *</span>\n<span class="line">     * <span class="token keyword">@param</span> <span class="token parameter">target</span> - The object to expose to JSON-RPC methods calls.  If this</span>\n<span class="line">     *   is omitted, the proxy won&#39;t be able to handle requests, only send them.</span>\n<span class="line">     */</span></span>\n<span class="line">    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token keyword">public</span> target<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">waitForConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line">\t<span class="token comment">// ...</span></span>\n<span class="line">\t<span class="token doc-comment comment">/**</span>\n<span class="line">     * Connect a MessageConnection to the factory.</span>\n<span class="line">     *</span>\n<span class="line">     * This connection will be used to send/receive JSON-RPC requests and</span>\n<span class="line">     * response.</span>\n<span class="line">     */</span></span>\n<span class="line">    <span class="token function">listen</span><span class="token punctuation">(</span>connection<span class="token operator">:</span> MessageConnection<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span></span>\n<span class="line">        connection<span class="token punctuation">.</span><span class="token function">onRequest</span><span class="token punctuation">(</span><span class="token punctuation">(</span>prop<span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">onRequest</span><span class="token punctuation">(</span>prop<span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">        connection<span class="token punctuation">.</span><span class="token function">onNotification</span><span class="token punctuation">(</span><span class="token punctuation">(</span>prop<span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">onNotification</span><span class="token punctuation">(</span>prop<span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">        connection<span class="token punctuation">.</span><span class="token function">onDispose</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">waitForConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">        connection<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">connectionPromiseResolve</span><span class="token punctuation">(</span>connection<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line">\t<span class="token doc-comment comment">/**</span>\n<span class="line">     * Process an incoming JSON-RPC method call.</span>\n<span class="line">     *</span>\n<span class="line">     * onRequest is called when the JSON-RPC connection received a method call</span>\n<span class="line">     * request.  It calls the corresponding method on [[target]].</span>\n<span class="line">     *</span>\n<span class="line">     * The return value is a Promise object that is resolved with the return</span>\n<span class="line">     * value of the method call, if it is successful.  The promise is rejected</span>\n<span class="line">     * if the called method does not exist or if it throws.</span>\n<span class="line">     *</span>\n<span class="line">     * <span class="token keyword">@returns</span> A promise of the method call completion.</span>\n<span class="line">     */</span></span>\n<span class="line">    <span class="token keyword">protected</span> <span class="token keyword">async</span> <span class="token function">onRequest</span><span class="token punctuation">(</span>method<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token comment">// ...</span></span>\n<span class="line">\t\t<span class="token keyword">return</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>target<span class="token punctuation">[</span>method<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">\t\t<span class="token comment">// ...</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line">\t<span class="token comment">// ...</span></span>\n<span class="line">\t<span class="token doc-comment comment">/**</span>\n<span class="line">     * Create a Proxy exposing the interface of an object of type T.  This Proxy</span>\n<span class="line">     * can be used to do JSON-RPC method calls on the remote target object as</span>\n<span class="line">     * if it was local.</span>\n<span class="line">     *</span>\n<span class="line">     * If `T` implements `JsonRpcServer` then a client is used as a target object for a remote target object.</span>\n<span class="line">     */</span></span>\n<span class="line">    <span class="token function">createProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> JsonRpcProxy<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token keyword">as</span> <span class="token builtin">any</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">        <span class="token keyword">return</span> result <span class="token keyword">as</span> <span class="token builtin">any</span><span class="token punctuation">;</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line"></span>\n<span class="line">\t<span class="token function">get</span><span class="token punctuation">(</span>target<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">,</span> p<span class="token operator">:</span> PropertyKey<span class="token punctuation">,</span> receiver<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">any</span> <span class="token punctuation">{</span></span>\n<span class="line">\t\t<span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">===</span> <span class="token string">&#39;setClient&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">            <span class="token keyword">return</span> <span class="token punctuation">(</span>client<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>\n<span class="line">                <span class="token keyword">this</span><span class="token punctuation">.</span>target <span class="token operator">=</span> client<span class="token punctuation">;</span></span>\n<span class="line">            <span class="token punctuation">}</span><span class="token punctuation">;</span></span>\n<span class="line">        <span class="token punctuation">}</span></span>\n<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">===</span> <span class="token string">&#39;getClient&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>target<span class="token punctuation">;</span></span>\n<span class="line">        <span class="token punctuation">}</span></span>\n<span class="line">\t\t<span class="token comment">// ...</span></span>\n<span class="line">\t\t<span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>\n<span class="line">\t\t\t<span class="token comment">// ...</span></span>\n<span class="line">\t\t\t<span class="token keyword">const</span> resultPromise <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">sendRequest</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">&gt;</span><span class="token punctuation">;</span></span>\n<span class="line">\t\t\t<span class="token comment">// ...</span></span>\n<span class="line">\t\t<span class="token punctuation">}</span></span>\n<span class="line">\t<span class="token punctuation">}</span></span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="前后端如何互相发送消息" tabindex="-1"><a class="header-anchor" href="#前后端如何互相发送消息"><span>前后端如何互相发送消息</span></a></h3><ul><li>可直接通过<code>channel.send(message)</code>发送消息</li><li>可通过代理对象的<code>get</code>方法</li></ul><p>通过<code>channel.send</code>在上面已经说过了，下面我们来看如何使用代理对象发送消息。</p><p>有上文创建代理对象的工厂函数可知，读取代理对象上的属性会触发内部声明的<code>get</code>方法，通过代码我们发现会执行到下面方法：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">const</span> resultPromise <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">sendRequest</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">&gt;</span><span class="token punctuation">;</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>其中<code>sendRequest</code>方法在<code>vscode-jsonrpc/lib/main.js</code>中，相关代码如下：</p><p><strong>vscode-jsonrpc/lib/main.js</strong></p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token function-variable function">sendRequest</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">type<span class="token punctuation">,</span> <span class="token operator">...</span>params</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>\n<span class="line">\t<span class="token comment">// ...</span></span>\n<span class="line">\tmessageWriter<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>requestMessage<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">\t<span class="token comment">// ...</span></span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>vscode-ws-jsonrpc/src/socket/writer.ts</strong></p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">WebSocketMessageWriter</span> <span class="token keyword">extends</span> <span class="token class-name">messageWriter_1</span><span class="token punctuation">.</span>AbstractMessageWriter <span class="token punctuation">{</span></span>\n<span class="line">    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token keyword">protected</span> <span class="token keyword">readonly</span> socket<span class="token operator">:</span> IWebSocket<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line">    <span class="token function">write</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token comment">// ...</span></span>\n<span class="line">\t\t<span class="token keyword">this</span><span class="token punctuation">.</span>socket<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">\t\t<span class="token comment">// ...</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>vscode-ws-jsonrpc/src/socket/connection.ts</strong></p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">createWebSocketConnection</span><span class="token punctuation">(</span>socket<span class="token operator">:</span> IWebSocket<span class="token punctuation">,</span> logger<span class="token operator">:</span> Logger<span class="token punctuation">)</span><span class="token operator">:</span> MessageConnection <span class="token punctuation">{</span></span>\n<span class="line">    <span class="token keyword">const</span> messageReader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebSocketMessageReader</span><span class="token punctuation">(</span>socket<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">    <span class="token keyword">const</span> messageWriter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebSocketMessageWriter</span><span class="token punctuation">(</span>socket<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">    <span class="token keyword">const</span> connection <span class="token operator">=</span> <span class="token function">createMessageConnection</span><span class="token punctuation">(</span>messageReader<span class="token punctuation">,</span> messageWriter<span class="token punctuation">,</span> logger<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">    connection<span class="token punctuation">.</span><span class="token function">onClose</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> connection<span class="token punctuation">.</span><span class="token function">dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">    <span class="token keyword">return</span> connection<span class="token punctuation">;</span></span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>createWebSocketConnection</code>则是在上文中通过<code>channel</code>创建<code>connection</code>的关键方法。 这样，当客户端调用<code>getHgService.getName();</code>方法时，实际上是调用了代理的get函数，进而，执行了<code>const resultPromise = connection.sendRequest(method, ...args) as Promise&lt;any&gt;;</code>从而发送向服务端send了一个请求。服务端由于在建立监听时，上文介绍过，在JsonRpcProxyFactory中，<code>listen</code>方法绑定了一系列对于json-rpc消息的处理函数。当服务端接收到消息时，上文代码写到，会触发<code>fireMessage</code>方法，从而，触发了一开始绑定的<code>readMessage</code>方法，从而关联到了listen中绑定的一系列callback。进而根据消息类型判断为<code>Request</code>，则触发了在<code>listen</code>时的onRequest监听函数，从而触发了下面的执行代码：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">protected</span> <span class="token keyword">async</span> <span class="token function">onRequest</span><span class="token punctuation">(</span>method<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token keyword">try</span> <span class="token punctuation">{</span></span>\n<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>target<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">                <span class="token keyword">return</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>target<span class="token punctuation">[</span>method<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>\n<span class="line">                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">no target was set to handle </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>method<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">            <span class="token punctuation">}</span></span>\n<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">            <span class="token keyword">const</span> e <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">serializeError</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token keyword">instanceof</span> <span class="token class-name">ResponseError</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">                <span class="token keyword">throw</span> e<span class="token punctuation">;</span></span>\n<span class="line">            <span class="token punctuation">}</span></span>\n<span class="line">            <span class="token keyword">const</span> reason <span class="token operator">=</span> e<span class="token punctuation">.</span>message <span class="token operator">||</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span></span>\n<span class="line">            <span class="token keyword">const</span> stack <span class="token operator">=</span> e<span class="token punctuation">.</span>stack <span class="token operator">||</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span></span>\n<span class="line">            <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Request </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>method<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> failed with error: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>reason<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> stack<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">            <span class="token keyword">throw</span> e<span class="token punctuation">;</span></span>\n<span class="line">        <span class="token punctuation">}</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h3><p>本文主要是基于Theia利用vscode-json-rpc插件进行前后端的远程过程调用机制，设计了一套本地的简版实现。那么从中我们可以深切的理解关于代理工厂、客户端、服务端、json-rpc的请求类型、关于整个路由调度、监听函数的绑定过程的技术底层设计。</p>',88)]))}]]),l=JSON.parse('{"path":"/AB%E4%BA%A7%E5%93%81%E7%9F%A5%E8%AF%86%E5%BA%93/%E7%9F%A5%E8%AF%86%E6%8E%A2%E7%B4%A2/%E5%89%8D%E7%AB%AF/Eclipse-Thiea/C%E7%AB%AF%E6%96%B0%E6%8A%80%E6%9C%AF%E8%B0%83%E7%A0%94%E7%AF%874%E2%80%94%E2%80%94%E5%A6%82%E4%BD%95%E8%AE%BE%E8%AE%A1%E4%B8%80%E5%A5%97%E5%9F%BA%E4%BA%8Ejson-rpc%E7%9A%84%E5%89%8D%E5%90%8E%E7%AB%AF%E8%BF%9C%E7%A8%8B%E8%BF%87%E7%A8%8B%E8%B0%83%E7%94%A8%E6%9C%BA%E5%88%B6%EF%BC%9F.html","title":"","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"什么是RPC？","slug":"什么是rpc","link":"#什么是rpc","children":[]},{"level":2,"title":"json-rpc具体有哪些应用场景？","slug":"json-rpc具体有哪些应用场景","link":"#json-rpc具体有哪些应用场景","children":[]},{"level":2,"title":"先拿一个场景举例🌰：","slug":"先拿一个场景举例","link":"#先拿一个场景举例","children":[]},{"level":2,"title":"整体架构：","slug":"整体架构","link":"#整体架构","children":[{"level":3,"title":"前端如何连接到后端的WS并处理json-rpc消息","slug":"前端如何连接到后端的ws并处理json-rpc消息","link":"#前端如何连接到后端的ws并处理json-rpc消息","children":[]},{"level":3,"title":"调用过程：","slug":"调用过程","link":"#调用过程","children":[]},{"level":3,"title":"前后端如何互相发送消息","slug":"前后端如何互相发送消息","link":"#前后端如何互相发送消息","children":[]},{"level":3,"title":"总结","slug":"总结","link":"#总结","children":[]}]}],"git":{"updatedTime":1727145923000,"contributors":[{"name":"wangaoqi","email":"wangaoqi@agree.com.cn","commits":1}]},"filePathRelative":"AB产品知识库/知识探索/前端/Eclipse-Thiea/C端新技术调研篇4——如何设计一套基于json-rpc的前后端远程过程调用机制？.md"}')}}]);